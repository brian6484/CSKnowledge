{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "kbl90Lu4yrH28B7exy01a",
      "type": "arrow",
      "x": 1217.7459891183034,
      "y": 2863.8175067925613,
      "width": 414.4761614118304,
      "height": 5.070424895711767,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "Zz",
      "roundness": {
        "type": 2
      },
      "seed": 1352257081,
      "version": 135,
      "versionNonce": 1742019386,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366109,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          414.4761614118304,
          5.070424895711767
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "ivhLJKByjVyF5oiQ9AjHZ",
        "focus": 0.040064954958772804,
        "gap": 21.94358849903938
      },
      "endBinding": {
        "elementId": "kPA_CxlTKnNSxmDg0ocSm",
        "focus": -0.16983595347434355,
        "gap": 21.58726283482156
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "0AH23cey9f3ey7vTAWEsu",
      "type": "rectangle",
      "x": 1027.111165364583,
      "y": -890.2595316569011,
      "width": 864.8889363606773,
      "height": 801.037048339844,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": {
        "type": 3
      },
      "seed": 793396483,
      "version": 373,
      "versionNonce": 1248575078,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "Rqul4TDHHXV4NYWvezlIi",
      "type": "text",
      "x": 277.1852213541664,
      "y": -886.8521321614585,
      "width": 729.8194580078125,
      "height": 500,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 176583587,
      "version": 836,
      "versionNonce": 410190246,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "Distributed Logging system: \n\ncalirfying questions\n1) do logs from those MSAs have a conistent log format for querying? no\nor do we have to apply a computational layer to format into consistent \nformat? up to u\n2) No correlation between logs when requests span multiple services? why?\nservices dont share trace id so user request through services cannot be\ntracked\n3) do we need a dashboard like grafana for visualisation? or just \nquerying of logs will do? and what kind of queries? yes and date-range, \nand various types\n4) what is the average log size? for calculation purpose 1KB\n\nfunctional requirements:\n1) need to normalise logs to have a consistent log format for querying\n2) query and visualisation functionality\n3) storage policy of hot data (7 days) and warm data (90 days) and move\nto aws s3 glacier for long term stroage up to 1 year\n4) alerting system via alert manager that uses PagerDuty and Slack",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Distributed Logging system: \n\ncalirfying questions\n1) do logs from those MSAs have a conistent log format for querying? no\nor do we have to apply a computational layer to format into consistent \nformat? up to u\n2) No correlation between logs when requests span multiple services? why?\nservices dont share trace id so user request through services cannot be\ntracked\n3) do we need a dashboard like grafana for visualisation? or just \nquerying of logs will do? and what kind of queries? yes and date-range, \nand various types\n4) what is the average log size? for calculation purpose 1KB\n\nfunctional requirements:\n1) need to normalise logs to have a consistent log format for querying\n2) query and visualisation functionality\n3) storage policy of hot data (7 days) and warm data (90 days) and move\nto aws s3 glacier for long term stroage up to 1 year\n4) alerting system via alert manager that uses PagerDuty and Slack",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "vJMaWdu_2ieDifuFf0hyY",
      "type": "text",
      "x": 1037.8149210611978,
      "y": -875.5187632242839,
      "width": 842.079345703125,
      "height": 650,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 760350147,
      "version": 1609,
      "versionNonce": 1904284221,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761110398897,
      "link": null,
      "locked": false,
      "text": "Non-functional requirements:\ncalc:\n100K client requests/second across all MSAs with reach log being 1Kb\n\nassuming theres 5 services, each producing 5 log entries per request:\n100K * 5 * 5 * 1K = 2500Mb = 2.5Gb/s of logs produced\n\ncap theorem:\nAP eventual consistency cuz we want isolated nodes to keep logging and storing data\nand its better to have excess logs rather than lost logs\n\nLatency: Query <5s, logs visible within 10s\nhigh durability but some non critical logs loss is acceptable\n\nlog data:\ntrace_id to correlate logs for 1 user across services, timestamp, instance id, message,\nlevel, service name\n\ntrace_id is unique per request/transaction.\nlike for cases where user can request 2 times concurrently, we need to trace PER \nREQUEST\n\nrequest A: api gw -> payment service -> bla (user1, trace1)\nrequest B: api gw -> product service -> bla (user1,trace2)\nwithout trace id, logs will be mixed tgt from both requests making debugging imposs\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Non-functional requirements:\ncalc:\n100K client requests/second across all MSAs with reach log being 1Kb\n\nassuming theres 5 services, each producing 5 log entries per request:\n100K * 5 * 5 * 1K = 2500Mb = 2.5Gb/s of logs produced\n\ncap theorem:\nAP eventual consistency cuz we want isolated nodes to keep logging and storing data\nand its better to have excess logs rather than lost logs\n\nLatency: Query <5s, logs visible within 10s\nhigh durability but some non critical logs loss is acceptable\n\nlog data:\ntrace_id to correlate logs for 1 user across services, timestamp, instance id, message,\nlevel, service name\n\ntrace_id is unique per request/transaction.\nlike for cases where user can request 2 times concurrently, we need to trace PER \nREQUEST\n\nrequest A: api gw -> payment service -> bla (user1, trace1)\nrequest B: api gw -> product service -> bla (user1,trace2)\nwithout trace id, logs will be mixed tgt from both requests making debugging imposs\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "iCusP3BLlIpHO0ZWjMXTE",
      "type": "rectangle",
      "x": 1926.3703409830723,
      "y": -888.0371729532878,
      "width": 1175.5060492621533,
      "height": 1191.3087632921006,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": {
        "type": 3
      },
      "seed": 432070381,
      "version": 498,
      "versionNonce": 1947256221,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761110423889,
      "link": null,
      "locked": false
    },
    {
      "id": "-Br8YpXAdhNVX_tlCm3Q1",
      "type": "text",
      "x": 1940.9633280436192,
      "y": -867.5433714124894,
      "width": 1150.55908203125,
      "height": 1675,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a7",
      "roundness": null,
      "seed": 210695555,
      "version": 4030,
      "versionNonce": 110172189,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761111181333,
      "link": null,
      "locked": false,
      "text": "my initial design:\nmsa <- log agent that pulls from msa asynchronously with a time interval  (wat happen if msa goes down before \nlog agent pulls within that time interval?) -> kafka queue (topic: log) -> worker nodes that consume the \nmessage (can apply consistent normalising here so that we can scale this independently and once that is \nprocessed, another worker takes that processed log and store to log db (could be s3, wat about cassandra \nthe system is AP anyway) -> alert manager -> pagerduty/slack\n\nkafka message could containe timestamp, trace id, span id, service name, message and user_id\n\ngpt design:\n1) so i thought this log agent is a separate network call from the msa but its within the msa server that pulls\nlogs, which the msa writes logs into a disk/buffer (NOT NETWORK CALL). Logs stored in buffer/disk are immune\nto server crashes so its the best. MSA shouldnt directly push cuz it increases complexity to do retries or handle\nfailures and should have local log agents do that to decouple application.\n\n2) 2 separate workers to normalise and store is good. I thought normalsiing would be compute heavy \n\nkafka (topic: raw-logs) -> noramlise workers format the logs -> kafka(topic:normalised-logs) -> storage workers\nstore logs to db and alert workers consume those logs in parallel \n\nadv of  this is \n1) independent scaling based on bottleneck\n2) failure isolation - dont lose data, just backpressure. With 1 worker doing both work, if that worker fails and\ndb is down, work fails. Log has been consumed from kafka but not stored anywhere. Worker must reconsume and\nrenormalise same log again. But with 2 stage, if storage worker cannot write to db, it can leave a message in\nkafka without committing offset. Normalised log stays in kafka queue and worker retries later when storage db\nis up. No need to renormalise. The key point is normalised logs are safe in kafka and storage workers just need\nto retry writing.\n3) multiple consumers - alert manager and storage workers reads from normalised logs topic in parallel so\ndont have to duplicate this work for both types of workers\n4) replay capability - maybe theres bug in storage code that corrupted data. Maybe storage worker stored normalised\nlogs with wrong timestamps and i discovered bugs later. Without normalised-logs topic, only have raw logs so need\nto normalise and store again. But with normalised logs can just fix bug in storage worker side and restore it, \neffectively skipping unnecessary normalising process\n\n3) storage choice\ncassandra is for ap but bad for querying so\nES for hot data (7 days) 2.5Gb/s for 7 days is 1.5 Pb. Cost is high but it allows fast queries (~1s) and full text\nindexing. Actually loki is better cuz instead of full text indexing, it indexes on certain fields like timestamp, service \nname, userId , etc that can be used to search s3 quickly.\n\nMOST IMPT: index maps lables -> chunks \n\nfor e.g. \nthe chunks (compressed log data) is in s3 and the indexes can be stored in Cass/local/s3 \n**Index (stored in DynamoDB):**\n```\ntrace_id=abc123 → [chunk_001.gz, chunk_045.gz]\nservice=checkout → [chunk_001.gz, chunk_002.gz, chunk_010.gz]\ntimestamp=2025-10-22T10:00 → [chunk_001.gz]\n```\n\n**Without index:**\n- Scan all 10,000 chunks in S3 (10 TB) ❌\n\n**With index:**\n- Index says: \"Only download chunk_001.gz (100 MB)\" ✅\n- 100x faster!\n\nS3 + Athena for warm (8~90days). We can compress and archive to s3 and query via athena\n\nS3 Glacier (91d - 1 year): rarely access, just for compliance\n\n4)  querying logic\nuser -> api gateway(rest/graphql) -> query service (routes query to correct storage)\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "my initial design:\nmsa <- log agent that pulls from msa asynchronously with a time interval  (wat happen if msa goes down before \nlog agent pulls within that time interval?) -> kafka queue (topic: log) -> worker nodes that consume the \nmessage (can apply consistent normalising here so that we can scale this independently and once that is \nprocessed, another worker takes that processed log and store to log db (could be s3, wat about cassandra \nthe system is AP anyway) -> alert manager -> pagerduty/slack\n\nkafka message could containe timestamp, trace id, span id, service name, message and user_id\n\ngpt design:\n1) so i thought this log agent is a separate network call from the msa but its within the msa server that pulls\nlogs, which the msa writes logs into a disk/buffer (NOT NETWORK CALL). Logs stored in buffer/disk are immune\nto server crashes so its the best. MSA shouldnt directly push cuz it increases complexity to do retries or handle\nfailures and should have local log agents do that to decouple application.\n\n2) 2 separate workers to normalise and store is good. I thought normalsiing would be compute heavy \n\nkafka (topic: raw-logs) -> noramlise workers format the logs -> kafka(topic:normalised-logs) -> storage workers\nstore logs to db and alert workers consume those logs in parallel \n\nadv of  this is \n1) independent scaling based on bottleneck\n2) failure isolation - dont lose data, just backpressure. With 1 worker doing both work, if that worker fails and\ndb is down, work fails. Log has been consumed from kafka but not stored anywhere. Worker must reconsume and\nrenormalise same log again. But with 2 stage, if storage worker cannot write to db, it can leave a message in\nkafka without committing offset. Normalised log stays in kafka queue and worker retries later when storage db\nis up. No need to renormalise. The key point is normalised logs are safe in kafka and storage workers just need\nto retry writing.\n3) multiple consumers - alert manager and storage workers reads from normalised logs topic in parallel so\ndont have to duplicate this work for both types of workers\n4) replay capability - maybe theres bug in storage code that corrupted data. Maybe storage worker stored normalised\nlogs with wrong timestamps and i discovered bugs later. Without normalised-logs topic, only have raw logs so need\nto normalise and store again. But with normalised logs can just fix bug in storage worker side and restore it, \neffectively skipping unnecessary normalising process\n\n3) storage choice\ncassandra is for ap but bad for querying so\nES for hot data (7 days) 2.5Gb/s for 7 days is 1.5 Pb. Cost is high but it allows fast queries (~1s) and full text\nindexing. Actually loki is better cuz instead of full text indexing, it indexes on certain fields like timestamp, service \nname, userId , etc that can be used to search s3 quickly.\n\nMOST IMPT: index maps lables -> chunks \n\nfor e.g. \nthe chunks (compressed log data) is in s3 and the indexes can be stored in Cass/local/s3 \n**Index (stored in DynamoDB):**\n```\ntrace_id=abc123 → [chunk_001.gz, chunk_045.gz]\nservice=checkout → [chunk_001.gz, chunk_002.gz, chunk_010.gz]\ntimestamp=2025-10-22T10:00 → [chunk_001.gz]\n```\n\n**Without index:**\n- Scan all 10,000 chunks in S3 (10 TB) ❌\n\n**With index:**\n- Index says: \"Only download chunk_001.gz (100 MB)\" ✅\n- 100x faster!\n\nS3 + Athena for warm (8~90days). We can compress and archive to s3 and query via athena\n\nS3 Glacier (91d - 1 year): rarely access, just for compliance\n\n4)  querying logic\nuser -> api gateway(rest/graphql) -> query service (routes query to correct storage)\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "XevQSAIvKE188cd-3L2dC",
      "type": "rectangle",
      "x": 166.04569837782105,
      "y": 1549.7034141903835,
      "width": 721.77783203125,
      "height": 545.7778015136719,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b02",
      "roundness": {
        "type": 3
      },
      "seed": 762173684,
      "version": 94,
      "versionNonce": 919888806,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "LKHpJ4jCKr6FE5ojXmZhA",
      "type": "text",
      "x": 191.82353040907105,
      "y": 1575.0366966610866,
      "width": 700.03955078125,
      "height": 500,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b06",
      "roundness": null,
      "seed": 925900276,
      "version": 852,
      "versionNonce": 1393884902,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "Scenario: Ticket buying system for online events \nFunctional requirements:\n1) User - buy tickets, browse tickets\n2) Platform - support 3 types of tickets - conference, concert, sports\nClarifying questions:\n1) do we have to design payment service logic too or are we using an\nexternal payment service provider like Stripe\n2) do users get  to cancel the tickets\n3) what is the DAU?\n4) Is there a social functionality where users can view tickets of other\nusers  \n\nAdjusted functional requirements (based on clarifying q):\n1) User - buy tickets, browse tickets, cancel tickets (before 24 hours),\nsearch events by location, artist, user\n2) Platform - can create tickets and upon cancellation, tickets need\nto be returned to inventory \n\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Scenario: Ticket buying system for online events \nFunctional requirements:\n1) User - buy tickets, browse tickets\n2) Platform - support 3 types of tickets - conference, concert, sports\nClarifying questions:\n1) do we have to design payment service logic too or are we using an\nexternal payment service provider like Stripe\n2) do users get  to cancel the tickets\n3) what is the DAU?\n4) Is there a social functionality where users can view tickets of other\nusers  \n\nAdjusted functional requirements (based on clarifying q):\n1) User - buy tickets, browse tickets, cancel tickets (before 24 hours),\nsearch events by location, artist, user\n2) Platform - can create tickets and upon cancellation, tickets need\nto be returned to inventory \n\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "K8kIIzjwka0osAxB1Gc-2",
      "type": "rectangle",
      "x": 910.823515150282,
      "y": 1557.1478226071315,
      "width": 830.5557250976565,
      "height": 748.8889312744138,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b08",
      "roundness": {
        "type": 3
      },
      "seed": 623989108,
      "version": 152,
      "versionNonce": 723530278,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "Nn-jTRFDWQl_pm0WRzgCN",
      "type": "text",
      "x": 939.7125227186414,
      "y": 1584.3700363522487,
      "width": 734.259521484375,
      "height": 700,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b09",
      "roundness": null,
      "seed": 1766949708,
      "version": 758,
      "versionNonce": 1283710589,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761112150108,
      "link": null,
      "locked": false,
      "text": "Non-functional req:\nDAU: ~10 million daily active users\nPeak traffic: When popular events go on sale (e.g., Taylor Swift concert), \nexpect 500K-1M concurrent users trying to buy tickets for the same event\nTotal events: ~50,000 active events at any time\nTicket inventory per event: Ranges from 100 to 100,000 tickets\n\nLets assume average ticket size is 1Kb\nAverage memory space at given time: 1Kb * 50k events * 100k tickets\n= 5000 x 10^9 = 5 Pb of data (wrong calc its GTP, not GPT)\n\ncorrect:\n1Kb * 50k * 100k = 5000 * 10 ^9= 5*10^12= 5Tb (terra, not peta)\n\nPeak traffic data = 1M* 1Kb = 1 Gb/popular_event\n\nCap theorem: (wron try)\nStrong consistency, Highly available, less priority on fault tolerance \n(is this right?)\n\nAPI: (not sure of restful api endpoints)\nUser: \nGET /ticket/user_id\nPOST /event_id/ticket\n\nPlatform:\nGET /event_id \n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Non-functional req:\nDAU: ~10 million daily active users\nPeak traffic: When popular events go on sale (e.g., Taylor Swift concert), \nexpect 500K-1M concurrent users trying to buy tickets for the same event\nTotal events: ~50,000 active events at any time\nTicket inventory per event: Ranges from 100 to 100,000 tickets\n\nLets assume average ticket size is 1Kb\nAverage memory space at given time: 1Kb * 50k events * 100k tickets\n= 5000 x 10^9 = 5 Pb of data (wrong calc its GTP, not GPT)\n\ncorrect:\n1Kb * 50k * 100k = 5000 * 10 ^9= 5*10^12= 5Tb (terra, not peta)\n\nPeak traffic data = 1M* 1Kb = 1 Gb/popular_event\n\nCap theorem: (wron try)\nStrong consistency, Highly available, less priority on fault tolerance \n(is this right?)\n\nAPI: (not sure of restful api endpoints)\nUser: \nGET /ticket/user_id\nPOST /event_id/ticket\n\nPlatform:\nGET /event_id \n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "frv_US0QfQFi07yVD-A6o",
      "type": "rectangle",
      "x": 187.92950197250067,
      "y": 2812.5710294814344,
      "width": 168.2539149693081,
      "height": 105.39679391043501,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0A",
      "roundness": {
        "type": 3
      },
      "seed": 1861205685,
      "version": 103,
      "versionNonce": 346710182,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "Lulhmzvtn92E2S2HxMN5A"
        },
        {
          "id": "8mkfF7rPWid6vqeKTSm2l",
          "type": "arrow"
        },
        {
          "id": "9kxVQ4K5rFd_ihQ8yFWNx",
          "type": "arrow"
        }
      ],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "Lulhmzvtn92E2S2HxMN5A",
      "type": "text",
      "x": 246.1664829556899,
      "y": 2852.769426436652,
      "width": 51.77995300292969,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0AV",
      "roundness": null,
      "seed": 1867225947,
      "version": 71,
      "versionNonce": 1596152806,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "client",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "frv_US0QfQFi07yVD-A6o",
      "originalText": "client",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "EY_sNXYzLjoU534xL_utp",
      "type": "rectangle",
      "x": 535.8659905327686,
      "y": 2806.2218255542575,
      "width": 227.93653215680814,
      "height": 127.61906215122738,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0C",
      "roundness": {
        "type": 3
      },
      "seed": 1746214837,
      "version": 76,
      "versionNonce": 488234406,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "8RRDmDhcTY5Zryx64SNFh"
        },
        {
          "id": "9kxVQ4K5rFd_ihQ8yFWNx",
          "type": "arrow"
        },
        {
          "id": "9Oy1e-59gHkg-Pd2OxZVX",
          "type": "arrow"
        },
        {
          "id": "PqZ-TVhbj-vZ7Humq92bh",
          "type": "arrow"
        }
      ],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "8RRDmDhcTY5Zryx64SNFh",
      "type": "text",
      "x": 555.7043280223055,
      "y": 2845.031356629872,
      "width": 188.25985717773438,
      "height": 50,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0D",
      "roundness": null,
      "seed": 2051474677,
      "version": 57,
      "versionNonce": 110835942,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "API Gateway (rate\nlimiting, auth)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "EY_sNXYzLjoU534xL_utp",
      "originalText": "API Gateway (rate limiting, auth)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "qG0Y0mRYzpN1xS2K9MFdZ",
      "type": "rectangle",
      "x": 530.7866448296436,
      "y": 2618.2853369939894,
      "width": 198.09522356305808,
      "height": 104.76187569754484,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0E",
      "roundness": {
        "type": 3
      },
      "seed": 190674325,
      "version": 53,
      "versionNonce": 146576870,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "WINEgPI-6k4jan9YC6_QS"
        },
        {
          "id": "8mkfF7rPWid6vqeKTSm2l",
          "type": "arrow"
        }
      ],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "WINEgPI-6k4jan9YC6_QS",
      "type": "text",
      "x": 536.4743246653718,
      "y": 2633.1662748427616,
      "width": 186.71986389160156,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0F",
      "roundness": null,
      "seed": 998360699,
      "version": 57,
      "versionNonce": 364701990,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "CDN (for retrieving\nstatic content\nfast)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "qG0Y0mRYzpN1xS2K9MFdZ",
      "originalText": "CDN (for retrieving static content fast)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "8mkfF7rPWid6vqeKTSm2l",
      "type": "arrow",
      "x": 362.5326862637954,
      "y": 2851.3650806135947,
      "width": 164.44440569196433,
      "height": 178.67582288246967,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0G",
      "roundness": {
        "type": 2
      },
      "seed": 1901995637,
      "version": 56,
      "versionNonce": 2002441978,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366111,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          164.44440569196433,
          -178.67582288246967
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "frv_US0QfQFi07yVD-A6o",
        "focus": 0.5856936448092765,
        "gap": 6.34926932198664
      },
      "endBinding": {
        "elementId": "qG0Y0mRYzpN1xS2K9MFdZ",
        "focus": 0.6858464766623027,
        "gap": 3.809552873883831
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "9kxVQ4K5rFd_ihQ8yFWNx",
      "type": "arrow",
      "x": 366.3421955411392,
      "y": 2873.333818145825,
      "width": 161.26983642578125,
      "height": 0.33042180744723737,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0H",
      "roundness": {
        "type": 2
      },
      "seed": 1827374107,
      "version": 40,
      "versionNonce": 1027137658,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366112,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          161.26983642578125,
          -0.33042180744723737
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "frv_US0QfQFi07yVD-A6o",
        "focus": 0.15618408039487977,
        "gap": 10.15877859933039
      },
      "endBinding": {
        "elementId": "EY_sNXYzLjoU534xL_utp",
        "focus": -0.04249675975693687,
        "gap": 8.253958565848166
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "ivhLJKByjVyF5oiQ9AjHZ",
      "type": "rectangle",
      "x": 967.8659120589963,
      "y": 2796.0631254287,
      "width": 227.93648856026778,
      "height": 126.98412214006703,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0I",
      "roundness": {
        "type": 3
      },
      "seed": 556312795,
      "version": 94,
      "versionNonce": 1717839398,
      "isDeleted": false,
      "boundElements": [
        {
          "id": "9Oy1e-59gHkg-Pd2OxZVX",
          "type": "arrow"
        },
        {
          "type": "text",
          "id": "nuff73AoggAeO2I70PDZM"
        },
        {
          "id": "kbl90Lu4yrH28B7exy01a",
          "type": "arrow"
        },
        {
          "id": "eyofQnm3CghafIiGh_RtO",
          "type": "arrow"
        }
      ],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "nuff73AoggAeO2I70PDZM",
      "type": "text",
      "x": 986.7142298864935,
      "y": 2834.555186498733,
      "width": 190.23985290527344,
      "height": 50,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0IG",
      "roundness": null,
      "seed": 21026005,
      "version": 42,
      "versionNonce": 814248294,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "Event service(read-\nheavy)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "ivhLJKByjVyF5oiQ9AjHZ",
      "originalText": "Event service(read-heavy)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "9Oy1e-59gHkg-Pd2OxZVX",
      "type": "arrow",
      "x": 780.3104398212731,
      "y": 2879.7921879053038,
      "width": 178.03172084263394,
      "height": 2.696123996951428,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0J",
      "roundness": {
        "type": 2
      },
      "seed": 45873045,
      "version": 52,
      "versionNonce": 1061325306,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366113,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          178.03172084263394,
          -2.696123996951428
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "EY_sNXYzLjoU534xL_utp",
        "focus": 0.17909035218702796,
        "gap": 16.50791713169633
      },
      "endBinding": {
        "elementId": "ivhLJKByjVyF5oiQ9AjHZ",
        "focus": -0.24028191150932085,
        "gap": 9.52375139508922
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "MpFUhBinUxyRqo6igLkT7",
      "type": "rectangle",
      "x": 949.8341912163623,
      "y": 3305.269459134057,
      "width": 224.7619628906249,
      "height": 138.41264997209873,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0K",
      "roundness": {
        "type": 3
      },
      "seed": 13940283,
      "version": 120,
      "versionNonce": 433508774,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "2Haq6yepXrUfS3QYltdsi"
        },
        {
          "id": "PqZ-TVhbj-vZ7Humq92bh",
          "type": "arrow"
        },
        {
          "id": "olaRQCzh_8sp3rA1tPaT0",
          "type": "arrow"
        },
        {
          "id": "5kJOLAHtfjWrC_UYmVDgZ",
          "type": "arrow"
        }
      ],
      "updated": 1760853366021,
      "link": null,
      "locked": false
    },
    {
      "id": "2Haq6yepXrUfS3QYltdsi",
      "type": "text",
      "x": 964.7152642144091,
      "y": 3349.4757841201063,
      "width": 194.99981689453125,
      "height": 50,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0L",
      "roundness": null,
      "seed": 213385371,
      "version": 108,
      "versionNonce": 1201253606,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366021,
      "link": null,
      "locked": false,
      "text": "Booking\nservice(write-heavy)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "MpFUhBinUxyRqo6igLkT7",
      "originalText": "Booking service(write-heavy)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "PqZ-TVhbj-vZ7Humq92bh",
      "type": "arrow",
      "x": 764.5508101831164,
      "y": 2943.536492933379,
      "width": 174.91794751623604,
      "height": 374.69260014015026,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0M",
      "roundness": {
        "type": 2
      },
      "seed": 1361866261,
      "version": 114,
      "versionNonce": 1594872698,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366114,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          174.91794751623604,
          374.69260014015026
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "EY_sNXYzLjoU534xL_utp",
        "focus": -0.5592937313636976,
        "gap": 19.14613295367756
      },
      "endBinding": {
        "elementId": "MpFUhBinUxyRqo6igLkT7",
        "focus": -0.6668717311950111,
        "gap": 13.333290518601034
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "wO_CJW6z37feZe4iuoyjS",
      "type": "rectangle",
      "x": 1758.0213080512153,
      "y": 1562.653960455031,
      "width": 887.407430013021,
      "height": 735.8024851481123,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0N",
      "roundness": {
        "type": 3
      },
      "seed": 1679430519,
      "version": 36,
      "versionNonce": 624090406,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "yiI2mH1oPwz3E1xtKTZ83",
      "type": "text",
      "x": 1792.6596602182542,
      "y": 1582.4070478166848,
      "width": 807.95947265625,
      "height": 600,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0P",
      "roundness": null,
      "seed": 132105113,
      "version": 827,
      "versionNonce": 2003787709,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761113087334,
      "link": null,
      "locked": false,
      "text": "Corrected non-functional req:\nnot all events have 100k events so lets assume 10k tickets\n1Kb * 50k events * 10k = 0.5 Tb = 500 Gb of data for storing ticket info\n\nplus db replicas, backups and indexes its like 1Tb\n\nFor CAP, P is unavoidable so we need to prioritise C or A. In ticket system, CP is \nbetter cuz when we buy tickets, we dont wanna overbuy tickets. \n\nAPI:\nUser:\nGET /events/{event_id, user_id}\n\nPOST /bookings/\nDELETE /bookings/{booking_id}\n\nPlatform:\nPOST /events\n\n500Gb of ticket info read might be dealt ok with postgres with read replicas AND\nREDIS!! I FORGOT REDIS!. But if reads become more than a few Tb, sharding \nbecomes necessary or more aggressive use of redis.\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Corrected non-functional req:\nnot all events have 100k events so lets assume 10k tickets\n1Kb * 50k events * 10k = 0.5 Tb = 500 Gb of data for storing ticket info\n\nplus db replicas, backups and indexes its like 1Tb\n\nFor CAP, P is unavoidable so we need to prioritise C or A. In ticket system, CP is \nbetter cuz when we buy tickets, we dont wanna overbuy tickets. \n\nAPI:\nUser:\nGET /events/{event_id, user_id}\n\nPOST /bookings/\nDELETE /bookings/{booking_id}\n\nPlatform:\nPOST /events\n\n500Gb of ticket info read might be dealt ok with postgres with read replicas AND\nREDIS!! I FORGOT REDIS!. But if reads become more than a few Tb, sharding \nbecomes necessary or more aggressive use of redis.\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "kPA_CxlTKnNSxmDg0ocSm",
      "type": "rectangle",
      "x": 1653.8094133649554,
      "y": 2781.8567475818445,
      "width": 288.2539585658483,
      "height": 151.74601963588202,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0R",
      "roundness": {
        "type": 3
      },
      "seed": 123194073,
      "version": 139,
      "versionNonce": 609110950,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "PabIhRI2NeEtHOuqiBhwD"
        },
        {
          "id": "kbl90Lu4yrH28B7exy01a",
          "type": "arrow"
        },
        {
          "id": "M_8TfLVpd0XcE0CbK0Lk2",
          "type": "arrow"
        }
      ],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "PabIhRI2NeEtHOuqiBhwD",
      "type": "text",
      "x": 1664.426489693778,
      "y": 2820.229757399785,
      "width": 267.0198059082031,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0RV",
      "roundness": null,
      "seed": 1202458423,
      "version": 149,
      "versionNonce": 1225909990,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false,
      "text": "Event primary DB for write\n(with read replicas but no\nsharding)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "kPA_CxlTKnNSxmDg0ocSm",
      "originalText": "Event primary DB for write (with read replicas but no sharding)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "EQ-ETrE-Ox1qql_KUKsFc",
      "type": "rectangle",
      "x": 2093.809361049107,
      "y": 3385.158335367838,
      "width": 316.19044712611617,
      "height": 151.11110142299094,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0T",
      "roundness": {
        "type": 3
      },
      "seed": 1324638679,
      "version": 241,
      "versionNonce": 569395366,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "GSVT-2jFj5NOWn3mPDo2o"
        },
        {
          "id": "55yQhUC7WtpwQ-GVY0qA_",
          "type": "arrow"
        }
      ],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "GSVT-2jFj5NOWn3mPDo2o",
      "type": "text",
      "x": 2108.5846840994695,
      "y": 3410.713886079333,
      "width": 286.6398010253906,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0U",
      "roundness": null,
      "seed": 656261911,
      "version": 324,
      "versionNonce": 460080102,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false,
      "text": "Booking DB (not Cassandra\ncuz its AP, so Postgresql like\nevent DB) and possibly\nsharding on user_id",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "EQ-ETrE-Ox1qql_KUKsFc",
      "originalText": "Booking DB (not Cassandra cuz its AP, so Postgresql like event DB) and possibly sharding on user_id",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "EuS7HMANrW6SFuDNJQiVs",
      "type": "rectangle",
      "x": 955.2697753906249,
      "y": 3624.523456391833,
      "width": 238.09526715959817,
      "height": 158.73011997767844,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0Y",
      "roundness": {
        "type": 3
      },
      "seed": 204401527,
      "version": 35,
      "versionNonce": 1324155494,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "qeHdw4mZMurxkpgz0Z7ir"
        },
        {
          "id": "olaRQCzh_8sp3rA1tPaT0",
          "type": "arrow"
        }
      ],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "qeHdw4mZMurxkpgz0Z7ir",
      "type": "text",
      "x": 982.4474901471817,
      "y": 3666.3885163806717,
      "width": 183.73983764648438,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0Z",
      "roundness": null,
      "seed": 1521966295,
      "version": 70,
      "versionNonce": 69977510,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false,
      "text": "External Payment\nService (e.g. Stripe\nPayments)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "EuS7HMANrW6SFuDNJQiVs",
      "originalText": "External Payment Service (e.g. Stripe Payments)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "olaRQCzh_8sp3rA1tPaT0",
      "type": "arrow",
      "x": 1075.2698625837054,
      "y": 3451.82500494094,
      "width": 1.2697928292409415,
      "height": 165.079345703125,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0a",
      "roundness": {
        "type": 2
      },
      "seed": 2019217753,
      "version": 32,
      "versionNonce": 2016984314,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366114,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          1.2697928292409415,
          165.079345703125
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "MpFUhBinUxyRqo6igLkT7",
        "focus": -0.11034764378452727,
        "gap": 8.142895834784213
      },
      "endBinding": {
        "elementId": "EuS7HMANrW6SFuDNJQiVs",
        "focus": 0.02416325933833493,
        "gap": 7.619105747768117
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "pJiW9QO1YnQorrdDKg8P-",
      "type": "rectangle",
      "x": 1345.746146065848,
      "y": 3059.190125964935,
      "width": 304.761962890625,
      "height": 173.96824428013406,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0b",
      "roundness": {
        "type": 3
      },
      "seed": 907318713,
      "version": 160,
      "versionNonce": 1931321190,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "Im-xNFEvgWx2Hnm5SCkiN"
        },
        {
          "id": "5kJOLAHtfjWrC_UYmVDgZ",
          "type": "arrow"
        },
        {
          "id": "eyofQnm3CghafIiGh_RtO",
          "type": "arrow"
        },
        {
          "id": "HPnYa4KqIJHgZOGS_irWo",
          "type": "arrow"
        }
      ],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "Im-xNFEvgWx2Hnm5SCkiN",
      "type": "text",
      "x": 1351.5272434779574,
      "y": 3096.1742481050023,
      "width": 293.19976806640625,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0c",
      "roundness": null,
      "seed": 1911994935,
      "version": 219,
      "versionNonce": 1916846758,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false,
      "text": "Redis cluster with 3 ~ 5 redis\nnodes (ticket inventory) -\nfast & atomic with no race\ncondition",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "pJiW9QO1YnQorrdDKg8P-",
      "originalText": "Redis cluster with 3 ~ 5 redis nodes (ticket inventory) - fast & atomic with no race condition",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "5kJOLAHtfjWrC_UYmVDgZ",
      "type": "arrow",
      "x": 1168.3817536246943,
      "y": 3290.438359459763,
      "width": 160.22278832913503,
      "height": 70.53621989402927,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0d",
      "roundness": {
        "type": 2
      },
      "seed": 1554077559,
      "version": 106,
      "versionNonce": 1616201338,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366114,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          160.22278832913503,
          -70.53621989402927
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "MpFUhBinUxyRqo6igLkT7",
        "focus": -0.31427862578779003,
        "gap": 20.03877103602336
      },
      "endBinding": {
        "elementId": "pJiW9QO1YnQorrdDKg8P-",
        "focus": 0.005857514818825691,
        "gap": 19.682725042862373
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "D2WlL07rX04JbBkHHHJDp",
      "type": "rectangle",
      "x": 2445.8938627697175,
      "y": 2494.279963175455,
      "width": 791.111328125,
      "height": 1378.6666717529297,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0f",
      "roundness": {
        "type": 3
      },
      "seed": 1362252089,
      "version": 115,
      "versionNonce": 1878285030,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "jNnFwb57fKRHNLqgAtk2r",
      "type": "text",
      "x": 2469.2271147228425,
      "y": 2512.279947916666,
      "width": 775.8994750976562,
      "height": 1225,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0g",
      "roundness": null,
      "seed": 1429356473,
      "version": 1983,
      "versionNonce": 194400093,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761115163614,
      "link": null,
      "locked": false,
      "text": "i think while explaining, good to incroporate the numbers inside the \ndiscussion like hashing event id on redis, average is 10k tickets so its good\nstrat and just need to deal with those 100k tickets event\n\nFor concurrency strategy, redis + queue \n\nredis cuz its fast (in-memory) and atomic (Redis's atomic commands ensure \nonly one transaction can successfully reserve the last ticket)\n\nclient -> redis decrements DECRBY 1 the ticket count and this is atomic\ncommand on the key that is holding that specific event \n\n[event_id, count]\n[event_id, event_info]\nSet(popular_event_id) - Sorted set of event_ids by popularity\n\nand\n# 3. Search results (popular queries)\nKey: \"search:new_york:2025-12-25:concerts\"\nthis colon is for name spacing, and Redis has SCAN command to search for\nkey easily if it follows this convertion like SCAN search:*\nValue: [event_id_1, event_id_2, ...]\nTTL: 5 minutes (search results can be slightly stale)\n\nAnd if it succeeds, redis can return a positive integer and if it fails, it can\nreturn a negative number\n\nif it succeeds, the request is directed to the payment service and if its ok\nwe get 200 success code. But if it fails the redis counter needs to be \nincremented again\n\nfor redis cluster, since we are hashing on event id, we can use consistent\nhash ring with vnodes for even load distribution (BUT it doesnt solve \nhotspot issues)\n\nevent:\nnot sharding event db with event id cuz there are search queries laid out in\nfunctional req (search via artist, location, etc) that dont use event id and \ncross shard joins are exp\n\ninstead, read replicas \n\noptimisation:\nbloom filter when querying shard, indexes on (location, date, category) for fast\nqueries\n\nfor global deployment:\nGlobal load balancer (route 53) to route user to nearest DC -> US/EU/APAC\nDC that has its own api gw, services, redis ,etc ",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "i think while explaining, good to incroporate the numbers inside the \ndiscussion like hashing event id on redis, average is 10k tickets so its good\nstrat and just need to deal with those 100k tickets event\n\nFor concurrency strategy, redis + queue \n\nredis cuz its fast (in-memory) and atomic (Redis's atomic commands ensure \nonly one transaction can successfully reserve the last ticket)\n\nclient -> redis decrements DECRBY 1 the ticket count and this is atomic\ncommand on the key that is holding that specific event \n\n[event_id, count]\n[event_id, event_info]\nSet(popular_event_id) - Sorted set of event_ids by popularity\n\nand\n# 3. Search results (popular queries)\nKey: \"search:new_york:2025-12-25:concerts\"\nthis colon is for name spacing, and Redis has SCAN command to search for\nkey easily if it follows this convertion like SCAN search:*\nValue: [event_id_1, event_id_2, ...]\nTTL: 5 minutes (search results can be slightly stale)\n\nAnd if it succeeds, redis can return a positive integer and if it fails, it can\nreturn a negative number\n\nif it succeeds, the request is directed to the payment service and if its ok\nwe get 200 success code. But if it fails the redis counter needs to be \nincremented again\n\nfor redis cluster, since we are hashing on event id, we can use consistent\nhash ring with vnodes for even load distribution (BUT it doesnt solve \nhotspot issues)\n\nevent:\nnot sharding event db with event id cuz there are search queries laid out in\nfunctional req (search via artist, location, etc) that dont use event id and \ncross shard joins are exp\n\ninstead, read replicas \n\noptimisation:\nbloom filter when querying shard, indexes on (location, date, category) for fast\nqueries\n\nfor global deployment:\nGlobal load balancer (route 53) to route user to nearest DC -> US/EU/APAC\nDC that has its own api gw, services, redis ,etc ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "O21VrFyHGm7xgN_XzdNv4",
      "type": "rectangle",
      "x": 2077.00482468378,
      "y": 2774.279978434244,
      "width": 302.2222900390625,
      "height": 176.88888549804688,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0h",
      "roundness": {
        "type": 3
      },
      "seed": 256712889,
      "version": 84,
      "versionNonce": 328948070,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "mcI2dNUydoydHZo0XjT0t"
        },
        {
          "id": "M_8TfLVpd0XcE0CbK0Lk2",
          "type": "arrow"
        }
      ],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "mcI2dNUydoydHZo0XjT0t",
      "type": "text",
      "x": 2116.4760389782136,
      "y": 2837.7244211832676,
      "width": 223.2798614501953,
      "height": 50,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0hV",
      "roundness": null,
      "seed": 1802973273,
      "version": 90,
      "versionNonce": 1861696678,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false,
      "text": "Multiple event DB read\nreplicas (for read)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "O21VrFyHGm7xgN_XzdNv4",
      "originalText": "Multiple event DB read replicas (for read)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "M_8TfLVpd0XcE0CbK0Lk2",
      "type": "arrow",
      "x": 1956.11615280878,
      "y": 2855.9868788089316,
      "width": 108.4443359375,
      "height": 2.055163269339573,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0j",
      "roundness": {
        "type": 2
      },
      "seed": 2020262359,
      "version": 129,
      "versionNonce": 1727885306,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366115,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          108.4443359375,
          -2.055163269339573
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "kPA_CxlTKnNSxmDg0ocSm",
        "focus": 0.015963947291034387,
        "gap": 14.052780877976375
      },
      "endBinding": {
        "elementId": "O21VrFyHGm7xgN_XzdNv4",
        "focus": 0.13024348361174856,
        "gap": 12.4443359375
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "eyofQnm3CghafIiGh_RtO",
      "type": "arrow",
      "x": 1216.5606108165925,
      "y": 2873.8354899088536,
      "width": 116.4444580078125,
      "height": 187.5555419921875,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0k",
      "roundness": {
        "type": 2
      },
      "seed": 300158135,
      "version": 36,
      "versionNonce": 1439250810,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366115,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          116.4444580078125,
          187.5555419921875
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "ivhLJKByjVyF5oiQ9AjHZ",
        "focus": -0.8205394040028311,
        "gap": 20.75821019732848
      },
      "endBinding": {
        "elementId": "pJiW9QO1YnQorrdDKg8P-",
        "focus": -0.5450199192409759,
        "gap": 20.082959281968666
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "UCGhLl0lW_5dqF-zdIhT6",
      "type": "rectangle",
      "x": 1733.8943510509675,
      "y": 3261.391306559244,
      "width": 253.333251953125,
      "height": 144,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0n",
      "roundness": {
        "type": 3
      },
      "seed": 993340409,
      "version": 85,
      "versionNonce": 1338443814,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "OlP4lwyczf6O4naV71KHK"
        },
        {
          "id": "HPnYa4KqIJHgZOGS_irWo",
          "type": "arrow"
        },
        {
          "id": "55yQhUC7WtpwQ-GVY0qA_",
          "type": "arrow"
        }
      ],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "OlP4lwyczf6O4naV71KHK",
      "type": "text",
      "x": 1757.4410582042879,
      "y": 3295.891306559244,
      "width": 206.23983764648438,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0o",
      "roundness": null,
      "seed": 2123686295,
      "version": 130,
      "versionNonce": 1866404710,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false,
      "text": "Kafka queue (for\ndecoupling write from\nresponse)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "UCGhLl0lW_5dqF-zdIhT6",
      "originalText": "Kafka queue (for decoupling write from response)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "HPnYa4KqIJHgZOGS_irWo",
      "type": "arrow",
      "x": 1669.0054350353425,
      "y": 3200.0579325358067,
      "width": 63.111083984375,
      "height": 73.77777099609375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0p",
      "roundness": {
        "type": 2
      },
      "seed": 40931449,
      "version": 28,
      "versionNonce": 1884332794,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366115,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          63.111083984375,
          73.77777099609375
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "pJiW9QO1YnQorrdDKg8P-",
        "focus": -0.5502251759593006,
        "gap": 18.49732607886949
      },
      "endBinding": {
        "elementId": "UCGhLl0lW_5dqF-zdIhT6",
        "focus": -0.41166774447080845,
        "gap": 5.575205984470406
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "55yQhUC7WtpwQ-GVY0qA_",
      "type": "arrow",
      "x": 2005.8943510509675,
      "y": 3362.724558512369,
      "width": 86.22216796875,
      "height": 77.3333740234375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0q",
      "roundness": {
        "type": 2
      },
      "seed": 2045388919,
      "version": 28,
      "versionNonce": 1949019258,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366116,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          86.22216796875,
          77.3333740234375
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "UCGhLl0lW_5dqF-zdIhT6",
        "focus": -0.5442505946692483,
        "gap": 18.666748046875
      },
      "endBinding": {
        "elementId": "EQ-ETrE-Ox1qql_KUKsFc",
        "focus": -0.5643335270434818,
        "gap": 1.6928420293893396
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "nnh--qmKGdSHgNhTTc8Fu",
      "type": "rectangle",
      "x": 262.7230694483193,
      "y": -888.9951328095938,
      "width": 749.6296183268229,
      "height": 799.9999491373699,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1J",
      "roundness": {
        "type": 3
      },
      "seed": 1050551733,
      "version": 107,
      "versionNonce": 1747465126,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760853366022,
      "link": null,
      "locked": false
    },
    {
      "id": "6TNMAao-2QcrlHfJNO1e9",
      "type": "rectangle",
      "x": 59.23432316855536,
      "y": 302.2655255756711,
      "width": 358.6666870117188,
      "height": 246.66671752929682,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1K",
      "roundness": {
        "type": 3
      },
      "seed": 29954333,
      "version": 112,
      "versionNonce": 970124989,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "s8As874_fFTRghrYijaij"
        },
        {
          "id": "VPtpQsSLUcDPyZXpVvUcd",
          "type": "arrow"
        }
      ],
      "updated": 1761111520224,
      "link": null,
      "locked": false
    },
    {
      "id": "s8As874_fFTRghrYijaij",
      "type": "text",
      "x": 68.06766667441477,
      "y": 388.0988843403195,
      "width": 341,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1L",
      "roundness": null,
      "seed": 1784834365,
      "version": 114,
      "versionNonce": 1769211059,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111425864,
      "link": null,
      "locked": false,
      "text": "MSA -> Local disk\n(/var/log/*.log) <- Log agent\n(fluentd) pulls from local disk",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "6TNMAao-2QcrlHfJNO1e9",
      "originalText": "MSA -> Local disk (/var/log/*.log) <- Log agent (fluentd) pulls from local disk",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "pHY7JW07pzkD2worz8s3R",
      "type": "rectangle",
      "x": 563.2343638586594,
      "y": 307.5988792540566,
      "width": 333.3333333333335,
      "height": 242.66677856445307,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1M",
      "roundness": {
        "type": 3
      },
      "seed": 1168815091,
      "version": 60,
      "versionNonce": 1969456755,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "HgyXaD8c_ztkCSgCFeEBt"
        },
        {
          "id": "VPtpQsSLUcDPyZXpVvUcd",
          "type": "arrow"
        },
        {
          "id": "8N-G6NB4UNe7aVibWyrro",
          "type": "arrow"
        }
      ],
      "updated": 1761111522103,
      "link": null,
      "locked": false
    },
    {
      "id": "HgyXaD8c_ztkCSgCFeEBt",
      "type": "text",
      "x": 581.4010305253262,
      "y": 416.4322685362831,
      "width": 297,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1N",
      "roundness": null,
      "seed": 579262557,
      "version": 33,
      "versionNonce": 2006618301,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111450811,
      "link": null,
      "locked": false,
      "text": "Kafka queue(topic:raw-logs)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "pHY7JW07pzkD2worz8s3R",
      "originalText": "Kafka queue(topic:raw-logs)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "bZEj-4ZY6LtqgVHredRr1",
      "type": "rectangle",
      "x": 997.9010101802739,
      "y": 306.26556626577536,
      "width": 320,
      "height": 234.6666971842447,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1O",
      "roundness": {
        "type": 3
      },
      "seed": 2009963731,
      "version": 70,
      "versionNonce": 4806141,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "6dO8enwVRnljMPEdwWCHx"
        },
        {
          "id": "8N-G6NB4UNe7aVibWyrro",
          "type": "arrow"
        },
        {
          "id": "d6Zlk1mE1XJghREuYbCNt",
          "type": "arrow"
        }
      ],
      "updated": 1761111523336,
      "link": null,
      "locked": false
    },
    {
      "id": "6dO8enwVRnljMPEdwWCHx",
      "type": "text",
      "x": 1053.401010180274,
      "y": 411.09891485789774,
      "width": 209,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1P",
      "roundness": null,
      "seed": 1600068275,
      "version": 25,
      "versionNonce": 768148307,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111459959,
      "link": null,
      "locked": false,
      "text": "Normalising workers",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "bZEj-4ZY6LtqgVHredRr1",
      "originalText": "Normalising workers",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "7VfesfxdKyI5Pnu0B5BYr",
      "type": "rectangle",
      "x": 1432.5677582271492,
      "y": 300.9322634500201,
      "width": 306.66666666666674,
      "height": 231.99996948242188,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1Q",
      "roundness": {
        "type": 3
      },
      "seed": 302603293,
      "version": 85,
      "versionNonce": 1354895251,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "VD6nxjbY7WMGv0gBp5Svg"
        },
        {
          "id": "d6Zlk1mE1XJghREuYbCNt",
          "type": "arrow"
        },
        {
          "id": "BPUnZPHKxobK00J4WTVtA",
          "type": "arrow"
        },
        {
          "id": "SoowYCNJ2jvVJvkqquLuS",
          "type": "arrow"
        }
      ],
      "updated": 1761111525544,
      "link": null,
      "locked": false
    },
    {
      "id": "VD6nxjbY7WMGv0gBp5Svg",
      "type": "text",
      "x": 1459.4010915604827,
      "y": 379.43224819123105,
      "width": 253,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1R",
      "roundness": null,
      "seed": 1803963933,
      "version": 40,
      "versionNonce": 989588765,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111482750,
      "link": null,
      "locked": false,
      "text": "Kafka\nqueue(topic:normalised-\nlogs)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "7VfesfxdKyI5Pnu0B5BYr",
      "originalText": "Kafka queue(topic:normalised-logs)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "t3X_zFSkXaNhzcIVP9HUe",
      "type": "rectangle",
      "x": 1265.9009898352222,
      "y": 720.93221258739,
      "width": 252.000020345052,
      "height": 260,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1S",
      "roundness": {
        "type": 3
      },
      "seed": 1434766963,
      "version": 45,
      "versionNonce": 838405331,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "zVGiRQvSZ1SoSmSeZRL4Y"
        },
        {
          "id": "BPUnZPHKxobK00J4WTVtA",
          "type": "arrow"
        }
      ],
      "updated": 1761111524470,
      "link": null,
      "locked": false
    },
    {
      "id": "zVGiRQvSZ1SoSmSeZRL4Y",
      "type": "text",
      "x": 1309.4010000077483,
      "y": 825.93221258739,
      "width": 165,
      "height": 50,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1T",
      "roundness": null,
      "seed": 2102011251,
      "version": 30,
      "versionNonce": 40716851,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111496908,
      "link": null,
      "locked": false,
      "text": "storage workers\n(loki+s3)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "t3X_zFSkXaNhzcIVP9HUe",
      "originalText": "storage workers (loki+s3)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "Pg4sIVoFezQJgukhA3Qvj",
      "type": "rectangle",
      "x": 1628.5675140865242,
      "y": 723.5988894265824,
      "width": 253.33333333333348,
      "height": 237.3333740234375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1U",
      "roundness": {
        "type": 3
      },
      "seed": 1110481267,
      "version": 71,
      "versionNonce": 1409254301,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "WHfDPO4FJXbOWzO8-z7Ly"
        },
        {
          "id": "SoowYCNJ2jvVJvkqquLuS",
          "type": "arrow"
        },
        {
          "id": "cCSwR0syV84NoIXosQZlm",
          "type": "arrow"
        }
      ],
      "updated": 1761111526783,
      "link": null,
      "locked": false
    },
    {
      "id": "WHfDPO4FJXbOWzO8-z7Ly",
      "type": "text",
      "x": 1639.734180753191,
      "y": 767.2655764383012,
      "width": 231,
      "height": 150,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1V",
      "roundness": null,
      "seed": 1103527677,
      "version": 115,
      "versionNonce": 1377459027,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111627339,
      "link": null,
      "locked": false,
      "text": "alert rule engine\n(checks logs against\nthreshold)-> alert\nmanager (notification\nrole, not checking\nlogs)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "Pg4sIVoFezQJgukhA3Qvj",
      "originalText": "alert rule engine (checks logs against threshold)-> alert manager (notification role, not checking logs)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "PL55vb4DI8NovHsLUFJSF",
      "type": "rectangle",
      "x": 1668.567717537045,
      "y": 1100.93221258739,
      "width": 238.66658528645848,
      "height": 227.99997965494777,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1W",
      "roundness": {
        "type": 3
      },
      "seed": 2125380957,
      "version": 42,
      "versionNonce": 1495203933,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "UFFoNMLpr9E5HOYXbHkGn"
        },
        {
          "id": "cCSwR0syV84NoIXosQZlm",
          "type": "arrow"
        }
      ],
      "updated": 1761111526783,
      "link": null,
      "locked": false
    },
    {
      "id": "UFFoNMLpr9E5HOYXbHkGn",
      "type": "text",
      "x": 1705.4010101802742,
      "y": 1202.432202414864,
      "width": 165,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1X",
      "roundness": null,
      "seed": 1017821875,
      "version": 25,
      "versionNonce": 1673569107,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111518164,
      "link": null,
      "locked": false,
      "text": "pagerduty/slack",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "PL55vb4DI8NovHsLUFJSF",
      "originalText": "pagerduty/slack",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "VPtpQsSLUcDPyZXpVvUcd",
      "type": "arrow",
      "x": 437.9010101802741,
      "y": 418.2655611795123,
      "width": 110.66670735677081,
      "height": 2.666651407877623,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1Y",
      "roundness": {
        "type": 2
      },
      "seed": 130268189,
      "version": 13,
      "versionNonce": 643829533,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111520224,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          110.66670735677081,
          2.666651407877623
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "6TNMAao-2QcrlHfJNO1e9",
        "focus": -0.09507299628426302,
        "gap": 19.999999999999943
      },
      "endBinding": {
        "elementId": "pHY7JW07pzkD2worz8s3R",
        "focus": 0.028963874530420923,
        "gap": 14.666646321614508
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "8N-G6NB4UNe7aVibWyrro",
      "type": "arrow",
      "x": 913.9010712154304,
      "y": 434.26554592072324,
      "width": 70.66660563151049,
      "height": 1.3333384195963163,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1Z",
      "roundness": {
        "type": 2
      },
      "seed": 1569211923,
      "version": 29,
      "versionNonce": 783302675,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111522104,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          70.66660563151049,
          -1.3333384195963163
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "pHY7JW07pzkD2worz8s3R",
        "focus": 0.0707352977950995,
        "gap": 17.3333740234375
      },
      "endBinding": {
        "elementId": "bZEj-4ZY6LtqgVHredRr1",
        "focus": -0.050375776659567974,
        "gap": 13.33333333333303
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "d6Zlk1mE1XJghREuYbCNt",
      "type": "arrow",
      "x": 1323.2343638586597,
      "y": 435.5989352029498,
      "width": 101.33331298828125,
      "height": 0,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1a",
      "roundness": {
        "type": 2
      },
      "seed": 641796029,
      "version": 11,
      "versionNonce": 2013761117,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111523336,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          101.33331298828125,
          0
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "bZEj-4ZY6LtqgVHredRr1",
        "focus": 0.10227288736782611,
        "gap": 5.33335367838572
      },
      "endBinding": {
        "elementId": "7VfesfxdKyI5Pnu0B5BYr",
        "focus": -0.1609197367858528,
        "gap": 8.000081380208258
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "BPUnZPHKxobK00J4WTVtA",
      "type": "arrow",
      "x": 1509.9011322505867,
      "y": 542.2655764383014,
      "width": 134.666748046875,
      "height": 163.99998982747388,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1b",
      "roundness": {
        "type": 2
      },
      "seed": 627217107,
      "version": 27,
      "versionNonce": 251063091,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111524470,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          -134.666748046875,
          163.99998982747388
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "7VfesfxdKyI5Pnu0B5BYr",
        "focus": -0.10827704455575275,
        "gap": 9.333343505859375
      },
      "endBinding": {
        "elementId": "t3X_zFSkXaNhzcIVP9HUe",
        "focus": -0.581994164397484,
        "gap": 14.666646321614735
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "SoowYCNJ2jvVJvkqquLuS",
      "type": "arrow",
      "x": 1615.2343842037117,
      "y": 544.9322024148639,
      "width": 102.66662597656273,
      "height": 178.66668701171875,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1c",
      "roundness": {
        "type": 2
      },
      "seed": 976685725,
      "version": 22,
      "versionNonce": 1805690163,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111525544,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          102.66662597656273,
          178.66668701171875
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "7VfesfxdKyI5Pnu0B5BYr",
        "focus": 0.20100404986531678,
        "gap": 11.999969482421875
      },
      "endBinding": {
        "elementId": "Pg4sIVoFezQJgukhA3Qvj",
        "focus": 0.1583523670294227,
        "gap": 1
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "cCSwR0syV84NoIXosQZlm",
      "type": "arrow",
      "x": 1767.2343028235034,
      "y": 967.5988792540566,
      "width": 8.000081380208485,
      "height": 122.66672770182299,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1d",
      "roundness": {
        "type": 2
      },
      "seed": 1879027869,
      "version": 15,
      "versionNonce": 2078738429,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761111526783,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          8.000081380208485,
          122.66672770182299
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "Pg4sIVoFezQJgukhA3Qvj",
        "focus": -0.02846699955037543,
        "gap": 6.66661580403661
      },
      "endBinding": {
        "elementId": "PL55vb4DI8NovHsLUFJSF",
        "focus": -0.035782783774532714,
        "gap": 10.666605631510492
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "LvVEUxwcUI-f23SDQIU25",
      "type": "rectangle",
      "x": 2694.186798580105,
      "y": 1568.047064311927,
      "width": 1326.8572126116073,
      "height": 723.4286063058034,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1e",
      "roundness": {
        "type": 3
      },
      "seed": 1800071581,
      "version": 141,
      "versionNonce": 100070131,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "G-H9uUcXcU35fiEdZpe-C"
        }
      ],
      "updated": 1761113166246,
      "link": null,
      "locked": false
    },
    {
      "id": "G-H9uUcXcU35fiEdZpe-C",
      "type": "text",
      "x": 2699.186798580105,
      "y": 1592.2613674648287,
      "width": 1298,
      "height": 675,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b1e2",
      "roundness": null,
      "seed": 1508236637,
      "version": 1871,
      "versionNonce": 2116654013,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761115087743,
      "link": null,
      "locked": false,
      "text": "correct flow:\ntheres mainly 2 services - event info service & booking/ticket service\nevent service:\napi gw-> event service (stateless) -> redis cluster (consistent hashing on event_id to distribute load evenly)\n-> postgresql (primary + read replicas) (no sharding yet cuz 1. only 500gb/day read 2.**VERY IMPT REASON** sharding on\nevent_ids BREAK MOST QUERIES! If user search via conditions like location, artist name, etc we have to query all\nshards! cross-shard query is exp so unless data size is huge, dont just shard)\n\nmaybe later can add postgres + es where\nevent service -> postgres -> Change Data Capture (CDC) -> kafka (topic:event-changes) -> ES sync worker that indexes\nonto ES cluster. So if I search \n\nbooking/ticket service:\napi gw -> booking service (producer) -> checks redis first (inventory counter of atomic DECR) and if inventory is\navailable-> kafka queue (topic:booking-request) -> booking worker (Consumer) -> postgresql (sharded by user_id if\nneeded) creates booking record-> kafka(topic:payment-request) -> payment worker consumes this event -> Stripe API  \n\nbtw consistent hash ring is for stateful flows\n1) redis cache 2) db sharding 3) websocket connection server\n\ncache all events:\nspecial pre-warming and multi-layer caching for popular events\nevent:{event_id}\nevent:{event_id}:avaialble for inventory counter\n\nfor booking db, although it is more write-heavy, postgres with ACID and CP is recommended. Optimisation can be done on\nconnection pooling, batch inserts and indexing.",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "left",
      "verticalAlign": "middle",
      "containerId": "LvVEUxwcUI-f23SDQIU25",
      "originalText": "correct flow:\ntheres mainly 2 services - event info service & booking/ticket service\nevent service:\napi gw-> event service (stateless) -> redis cluster (consistent hashing on event_id to distribute load evenly)\n-> postgresql (primary + read replicas) (no sharding yet cuz 1. only 500gb/day read 2.**VERY IMPT REASON** sharding on\nevent_ids BREAK MOST QUERIES! If user search via conditions like location, artist name, etc we have to query all shards! cross-shard query is exp so unless data size is huge, dont just shard)\n\nmaybe later can add postgres + es where\nevent service -> postgres -> Change Data Capture (CDC) -> kafka (topic:event-changes) -> ES sync worker that indexes\nonto ES cluster. So if I search \n\nbooking/ticket service:\napi gw -> booking service (producer) -> checks redis first (inventory counter of atomic DECR) and if inventory is available-> kafka queue (topic:booking-request) -> booking worker (Consumer) -> postgresql (sharded by user_id if needed) creates booking record-> kafka(topic:payment-request) -> payment worker consumes this event -> Stripe API  \n\nbtw consistent hash ring is for stateful flows\n1) redis cache 2) db sharding 3) websocket connection server\n\ncache all events:\nspecial pre-warming and multi-layer caching for popular events\nevent:{event_id}\nevent:{event_id}:avaialble for inventory counter\n\nfor booking db, although it is more write-heavy, postgres with ACID and CP is recommended. Optimisation can be done on\nconnection pooling, batch inserts and indexing.",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}
