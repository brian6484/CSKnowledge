{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "47KZRhT9kNqIeO2Vuj__s",
      "type": "rectangle",
      "x": -658.5700794655036,
      "y": -10605.571100969077,
      "width": 895.4329574627636,
      "height": 773.8449324277244,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aq",
      "roundness": {
        "type": 3
      },
      "seed": 1331882121,
      "version": 58,
      "versionNonce": 1424869353,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760922867166,
      "link": null,
      "locked": false
    },
    {
      "id": "97yCKF7LuiopcbbmFIKYE",
      "type": "text",
      "x": -622.4913705507154,
      "y": -10564.663015236816,
      "width": 831.95947265625,
      "height": 375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "ar",
      "roundness": null,
      "seed": 1459186023,
      "version": 848,
      "versionNonce": 1702606953,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760923260465,
      "link": null,
      "locked": false,
      "text": "scenario: design multi region failover system for e-commerce\nclarifying questions: \n1) so i assume the e commerce platform system has already been designed? and i just\nadd functionalities to tackle this failover? no, design the entire system from scratch\n2) u mentioned its regional failure but can cross-regional failure also occur? yes\nits possible. What happens if us-east cant talk to eu? How to prevent split-brain\nwhere **both regions think they are primary**?\n3) what if payment fails midway during a regional failure? do we have to handle that?\nyes. It should be idempotent\n4) 400 bytes/payment, 3Kb/product\n\nfunctional req:\ndesign e-commerce platform from scratch with multi-region failover\nhandle transactions that happen during a regional failure\nhandle cross-regional failure",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "scenario: design multi region failover system for e-commerce\nclarifying questions: \n1) so i assume the e commerce platform system has already been designed? and i just\nadd functionalities to tackle this failover? no, design the entire system from scratch\n2) u mentioned its regional failure but can cross-regional failure also occur? yes\nits possible. What happens if us-east cant talk to eu? How to prevent split-brain\nwhere **both regions think they are primary**?\n3) what if payment fails midway during a regional failure? do we have to handle that?\nyes. It should be idempotent\n4) 400 bytes/payment, 3Kb/product\n\nfunctional req:\ndesign e-commerce platform from scratch with multi-region failover\nhandle transactions that happen during a regional failure\nhandle cross-regional failure",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "OJZyPV7MH5W5IsuR8sfbd",
      "type": "rectangle",
      "x": 285.72536912185296,
      "y": -10594.207706493966,
      "width": 1062.4743436593149,
      "height": 754.5272192558514,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "as",
      "roundness": {
        "type": 3
      },
      "seed": 341144105,
      "version": 78,
      "versionNonce": 1312540233,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760923367974,
      "link": null,
      "locked": false
    },
    {
      "id": "0QsniXpO5-IcQHSlKHi9c",
      "type": "text",
      "x": 321.37003289921506,
      "y": -10570.638678744806,
      "width": 1000.4592895507812,
      "height": 500,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "at",
      "roundness": null,
      "seed": 1171233031,
      "version": 1021,
      "versionNonce": 293172403,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761185797863,
      "link": null,
      "locked": false,
      "text": "non-functional req:\ncalc:\n100M users, 10M products, 50k orders/sec\nproduct data: \n10M * 3K = 30G of memory\norder data:\n50k orders * 400bytes = 20000k = 20Mb/s\n\ncap theorem:\nproduct can be AP with eventual consistency but payment and inventory service has to be CP because\nwe must have isolated nodes to sync and prevent duplicate/invalid payment requests. If we have AP \nthen we could accept a payment or order but later when parittion is solved, we might have to cancel\nthe order cuz of insufficient inventory or invalid payment \n\n<30s RTO with high availability but for payment service the RPO (recovery point objective) which\ntells how much data we can afford to lose should be 0, espeically for payment. For this rpo to be 0, \nwe can use 2pc/saga for distributed transaction ,WAL and syncrhonous replication.\n\nregulatory: EU data must stay in EU, payment data encryption at rest/transit\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "non-functional req:\ncalc:\n100M users, 10M products, 50k orders/sec\nproduct data: \n10M * 3K = 30G of memory\norder data:\n50k orders * 400bytes = 20000k = 20Mb/s\n\ncap theorem:\nproduct can be AP with eventual consistency but payment and inventory service has to be CP because\nwe must have isolated nodes to sync and prevent duplicate/invalid payment requests. If we have AP \nthen we could accept a payment or order but later when parittion is solved, we might have to cancel\nthe order cuz of insufficient inventory or invalid payment \n\n<30s RTO with high availability but for payment service the RPO (recovery point objective) which\ntells how much data we can afford to lose should be 0, espeically for payment. For this rpo to be 0, \nwe can use 2pc/saga for distributed transaction ,WAL and syncrhonous replication.\n\nregulatory: EU data must stay in EU, payment data encryption at rest/transit\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "FiIQ-JRZljd-6mbFrvEbC",
      "type": "rectangle",
      "x": -652.4308383638471,
      "y": -9772.724364462358,
      "width": 1119.3793166064897,
      "height": 1497.4807841493346,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "au",
      "roundness": {
        "type": 3
      },
      "seed": 524301513,
      "version": 242,
      "versionNonce": 781185095,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1760926509401,
      "link": null,
      "locked": false
    },
    {
      "id": "eL7_gs1Tv2dLV1mMnuInc",
      "type": "text",
      "x": -632.4247161121074,
      "y": -9751.82925162278,
      "width": 1089.079345703125,
      "height": 3475,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "av",
      "roundness": null,
      "seed": 990222023,
      "version": 6228,
      "versionNonce": 1507441533,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1761185954353,
      "link": null,
      "locked": false,
      "text": "my design:\nclient request -> LB (to dist traffic evenly) -> product service (list products and details) -> product db\n(its not bottleneck here cuz only 30Gb so can just use postgres but optimise with Redis cache for\ntop popular products or user's starred/interest products)\n\nLB can also -> payment service(for actual payment) -> kafka queue(topic:payment and to increase \nreliability to store messages when payment service goes down so that we can try when service is up)\n-> worker nodes can store to DB \n\npayment DB has to be CP and handle heavy write throughput. We can use HBase for CP but Idk Hbase\nso I will choose Cassandra for AP and adjust the consistency level. Cass is decentralised and can evenly\ndistribute traffic via parition key(user_id) and clustering key(payment_id), which will sort data\nbased on these keys. Using parition key of user_id prevents cross-shard query when we search for user's\norder or payment details cuz can just query 1 shard\n\nfor regional failover, we can choose cross-region nodes in Cassandra's consistent hash ring and set quorum\nconsensus to be highly consistent so that replication is done on those cross region nodes before processing\nthe payment. But if the coordinator node that was handling this payment fails, then it can failover to other\nnodes in the ring to complete that transaction. [gpt improvement] Also mention RF of 3. So if 3 regions \nwith RF=3, theres 9 nods and for quorum write = 5/9 nodes must ack. If US fails theres 6 nodes remaining \nso 6>5 system still\nworks. If client sends payment write to node A (coordinator) and it fails mid-write, client library detects\ntimeout and hits node-b(new coordinator) and checks if this payment has succeeded and uses idempotent\nkey to prevent duplciates. Client side retry logic with expon. backoff can also tried. \n\ngpt correction:\nso the partition key strat and cross-region replication with quorum for Cass is correct. but kafka for \npayment and Cassandra choice for payment db is wrong\n1) But using cass for payment is wrong cuz u cant truly make it as CP. There is no ACID transaction\nacross paritions. \n\nfor example in postgres, u might have transaction of 2 updates of + and - funds and insert and commit. \nEither all succeed or all rollback but in Cassandra, the 2 updates and 1 insert are all SEPARATE operations\nand not atomic tgt.\n\nI actually didnt choose Postgres cuz i thought it cant handle 20Mb/s writes = 1.7Tb/day but cockroach\nwith 5 node cluster or postgres with syncrhonous cross-replication can also handle with a bit of latency. \nu can optimise via batch writes, or write-ahead log(wal) tuning \nU can\nhave primary postgres in US and read only replicas in EU and ASIA. \n\nfailover srat:\n1) primary region fails - health check fail and consensus service(zookeeper) detects primary down and triggers \nautomatic failover. Can select new primary from replicas. If transaction is committed before crash, \nits replicated to replicas so its safe but if uncommited it is lost. In doubt can use idempotency key. Its a uuid\nthat makes retrying same request safe \n\nUser clicks \"Pay $100\"\n    ↓\nRequest sent to server\n    ↓\nServer starts processing... \n    ↓\n💥 Network timeout (no response received)\n    ↓\nClient doesn't know: Did payment succeed or fail?\n    ↓\nUser clicks \"Pay\" again\n    ↓\n❌ Charged $200! (duplicate payment)\n```\n\n### With Idempotency Key:\n```\nUser clicks \"Pay $100\"\n    ↓\nClient generates unique key: \"idempotency_key=abc123\"\nRequest: POST /payment {amount: 100, idempotency_key: \"abc123\"}\n    ↓\nServer processes payment with key \"abc123\"\n    ↓\n💥 Network timeout (no response)\n    ↓\nClient retries with SAME key: \"abc123\"\n    ↓\nServer checks: \"abc123 already processed → return previous result\"\n    ↓\n✅ No duplicate charge! Returns original transaction\n\n2) network partition between regions - split brain problem and both replicas think they should become the\nprimary. Sol is quorum based failover (2/3 regions) actually this still fails cuz\n\nif US is solated, and EU + ASIA can communicate so both replicas have 2/3 consensus condition. Instead we \nshould use a distributed consensus (raft/paxos) or a pre designated priority (priority config where US is\nprimary, EU is first, Asia is second and only promotes to Next in priority order)\n\n2) using kafka queue for payment is dangerous. It creates async processing where payment succeeds.\nGPT said user has to wait for worker node to consume and complete that transaction. \nBut i thought the point of using kafka was ability to return to user immediately. Actually we cannot return \nwith success code cuz we havent completed transaction yet but a \"pending transaction is being processed, \nplease wait\" response. So while kafka is fine for post-payment events like notif or analytics, payment should be\nsynchronous with 2PC or saga pattern to ensure data loss is 0 (RPO is 0)\n\n2PC: (synchronous and blocking protocol)\nCoordinator (Order service) orcehstrats\nphase 1: prepare and ask if everyone is ready\ncoordinator -> ask payment service if u can charge $100 -> payment service ask stripe to reserve $100 and\nstripe and apyment responds with OK READY\ncoordinator -> asks inventory service if u can reserve 1 item -> OK response back\n\nphase 2: commit\ncoordinator node demands payment and inventory and order DB to execute so all succeed tgt. \n\nphase 2: rollback\nif coordinator node sees that if inventory service failed, we abort the entire process so asks payment and\ninventory to rollback\n\nSaga pattern: (asynchronous) i dont rly get \nit breaks a large transaction into a sequence of local transactions and coordinated thru events/orchestrator\nand if something fails, **compensating transactions** undo previous steps\n\nUser Request\n    ↓\nAPI Gateway\n    ↓\nOrder Service (Saga Orchestrator)\n    ↓\n    ├─→ Payment Service (sync) → Stripe API\n    │   ✅ Charge succeeds → Continue\n    │   ❌ Charge fails → Return error immediately\n    ↓\n    ├─→ Inventory Service (sync) → Check/reserve stock\n    │   ✅ Reserved → Continue\n    │   ❌ Out of stock → Refund payment, return error\n    ↓\n    ├─→ Order DB (sync) → Create order record\n    │   ✅ Created → Success! Return order_id to user\n    │   ❌ DB error → Refund payment, release inventory\n    ↓\n    └─→ Kafka (async) → Publish \"order.created\" event\n        → Email Service sends confirmation\n        → Analytics Service logs event\n        → Warehouse Service prepares shipment \n\nif anything fails along the way, each rollbakc step is a **compensentating transaction**, not a \nliteral rollback in DB. so instead of ROLLBACK, it does UPDATE\n\n3) i said if cooridinator node fails, failover to other nodes in the ring. But how does client know to\nretry to diff region? (need global LB like route 53/cloudflare)",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "my design:\nclient request -> LB (to dist traffic evenly) -> product service (list products and details) -> product db\n(its not bottleneck here cuz only 30Gb so can just use postgres but optimise with Redis cache for\ntop popular products or user's starred/interest products)\n\nLB can also -> payment service(for actual payment) -> kafka queue(topic:payment and to increase \nreliability to store messages when payment service goes down so that we can try when service is up)\n-> worker nodes can store to DB \n\npayment DB has to be CP and handle heavy write throughput. We can use HBase for CP but Idk Hbase\nso I will choose Cassandra for AP and adjust the consistency level. Cass is decentralised and can evenly\ndistribute traffic via parition key(user_id) and clustering key(payment_id), which will sort data\nbased on these keys. Using parition key of user_id prevents cross-shard query when we search for user's\norder or payment details cuz can just query 1 shard\n\nfor regional failover, we can choose cross-region nodes in Cassandra's consistent hash ring and set quorum\nconsensus to be highly consistent so that replication is done on those cross region nodes before processing\nthe payment. But if the coordinator node that was handling this payment fails, then it can failover to other\nnodes in the ring to complete that transaction. [gpt improvement] Also mention RF of 3. So if 3 regions \nwith RF=3, theres 9 nods and for quorum write = 5/9 nodes must ack. If US fails theres 6 nodes remaining \nso 6>5 system still\nworks. If client sends payment write to node A (coordinator) and it fails mid-write, client library detects\ntimeout and hits node-b(new coordinator) and checks if this payment has succeeded and uses idempotent\nkey to prevent duplciates. Client side retry logic with expon. backoff can also tried. \n\ngpt correction:\nso the partition key strat and cross-region replication with quorum for Cass is correct. but kafka for \npayment and Cassandra choice for payment db is wrong\n1) But using cass for payment is wrong cuz u cant truly make it as CP. There is no ACID transaction\nacross paritions. \n\nfor example in postgres, u might have transaction of 2 updates of + and - funds and insert and commit. \nEither all succeed or all rollback but in Cassandra, the 2 updates and 1 insert are all SEPARATE operations\nand not atomic tgt.\n\nI actually didnt choose Postgres cuz i thought it cant handle 20Mb/s writes = 1.7Tb/day but cockroach\nwith 5 node cluster or postgres with syncrhonous cross-replication can also handle with a bit of latency. \nu can optimise via batch writes, or write-ahead log(wal) tuning \nU can\nhave primary postgres in US and read only replicas in EU and ASIA. \n\nfailover srat:\n1) primary region fails - health check fail and consensus service(zookeeper) detects primary down and triggers \nautomatic failover. Can select new primary from replicas. If transaction is committed before crash, \nits replicated to replicas so its safe but if uncommited it is lost. In doubt can use idempotency key. Its a uuid\nthat makes retrying same request safe \n\nUser clicks \"Pay $100\"\n    ↓\nRequest sent to server\n    ↓\nServer starts processing... \n    ↓\n💥 Network timeout (no response received)\n    ↓\nClient doesn't know: Did payment succeed or fail?\n    ↓\nUser clicks \"Pay\" again\n    ↓\n❌ Charged $200! (duplicate payment)\n```\n\n### With Idempotency Key:\n```\nUser clicks \"Pay $100\"\n    ↓\nClient generates unique key: \"idempotency_key=abc123\"\nRequest: POST /payment {amount: 100, idempotency_key: \"abc123\"}\n    ↓\nServer processes payment with key \"abc123\"\n    ↓\n💥 Network timeout (no response)\n    ↓\nClient retries with SAME key: \"abc123\"\n    ↓\nServer checks: \"abc123 already processed → return previous result\"\n    ↓\n✅ No duplicate charge! Returns original transaction\n\n2) network partition between regions - split brain problem and both replicas think they should become the\nprimary. Sol is quorum based failover (2/3 regions) actually this still fails cuz\n\nif US is solated, and EU + ASIA can communicate so both replicas have 2/3 consensus condition. Instead we \nshould use a distributed consensus (raft/paxos) or a pre designated priority (priority config where US is\nprimary, EU is first, Asia is second and only promotes to Next in priority order)\n\n2) using kafka queue for payment is dangerous. It creates async processing where payment succeeds.\nGPT said user has to wait for worker node to consume and complete that transaction. \nBut i thought the point of using kafka was ability to return to user immediately. Actually we cannot return \nwith success code cuz we havent completed transaction yet but a \"pending transaction is being processed, \nplease wait\" response. So while kafka is fine for post-payment events like notif or analytics, payment should be\nsynchronous with 2PC or saga pattern to ensure data loss is 0 (RPO is 0)\n\n2PC: (synchronous and blocking protocol)\nCoordinator (Order service) orcehstrats\nphase 1: prepare and ask if everyone is ready\ncoordinator -> ask payment service if u can charge $100 -> payment service ask stripe to reserve $100 and\nstripe and apyment responds with OK READY\ncoordinator -> asks inventory service if u can reserve 1 item -> OK response back\n\nphase 2: commit\ncoordinator node demands payment and inventory and order DB to execute so all succeed tgt. \n\nphase 2: rollback\nif coordinator node sees that if inventory service failed, we abort the entire process so asks payment and\ninventory to rollback\n\nSaga pattern: (asynchronous) i dont rly get \nit breaks a large transaction into a sequence of local transactions and coordinated thru events/orchestrator\nand if something fails, **compensating transactions** undo previous steps\n\nUser Request\n    ↓\nAPI Gateway\n    ↓\nOrder Service (Saga Orchestrator)\n    ↓\n    ├─→ Payment Service (sync) → Stripe API\n    │   ✅ Charge succeeds → Continue\n    │   ❌ Charge fails → Return error immediately\n    ↓\n    ├─→ Inventory Service (sync) → Check/reserve stock\n    │   ✅ Reserved → Continue\n    │   ❌ Out of stock → Refund payment, return error\n    ↓\n    ├─→ Order DB (sync) → Create order record\n    │   ✅ Created → Success! Return order_id to user\n    │   ❌ DB error → Refund payment, release inventory\n    ↓\n    └─→ Kafka (async) → Publish \"order.created\" event\n        → Email Service sends confirmation\n        → Analytics Service logs event\n        → Warehouse Service prepares shipment \n\nif anything fails along the way, each rollbakc step is a **compensentating transaction**, not a \nliteral rollback in DB. so instead of ROLLBACK, it does UPDATE\n\n3) i said if cooridinator node fails, failover to other nodes in the ring. But how does client know to\nretry to diff region? (need global LB like route 53/cloudflare)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "8dRjz10qQ6AWQouQvpK1W",
      "type": "rectangle",
      "x": 520.3808137699305,
      "y": -9762.071851655046,
      "width": 1086.0000610351562,
      "height": 864.0000152587891,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aw",
      "roundness": {
        "type": 3
      },
      "seed": 1209755955,
      "version": 118,
      "versionNonce": 569940669,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "DKjyK9DGcLcwMj9BEFfij"
        }
      ],
      "updated": 1761184786917,
      "link": null,
      "locked": false
    },
    {
      "id": "DKjyK9DGcLcwMj9BEFfij",
      "type": "text",
      "x": 535.3808442875086,
      "y": -9417.571844025651,
      "width": 1056,
      "height": 175,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "ax",
      "roundness": null,
      "seed": 462287347,
      "version": 456,
      "versionNonce": 1804994845,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761185215169,
      "link": null,
      "locked": false,
      "text": "so for cp, scaling is post gres with read replica -> postgres with sharding -> cockroach db\ncluster\nmoving from replica to sharding, if primary CPU or io is high and optimisations are exhausted\nlike caching to full capacity and still cpu or io is high. Or if frequent long transactions and\nvacuum (db garbage collection which reclaims disk space for deleted rows) cant keep up then move\nto sharding\nbwt for replica way, if pirmary is down we can have zookeper ",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "8dRjz10qQ6AWQouQvpK1W",
      "originalText": "so for cp, scaling is post gres with read replica -> postgres with sharding -> cockroach db cluster\nmoving from replica to sharding, if primary CPU or io is high and optimisations are exhausted like caching to full capacity and still cpu or io is high. Or if frequent long transactions and vacuum (db garbage collection which reclaims disk space for deleted rows) cant keep up then move to sharding\nbwt for replica way, if pirmary is down we can have zookeper ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "a5ouNWN22Z2EoFomI9WIy",
      "type": "rectangle",
      "x": 1274.4184998302762,
      "y": -8751.12982306442,
      "width": 1053.3333333333335,
      "height": 133.33333333333394,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "ay",
      "roundness": {
        "type": 3
      },
      "seed": 1558457875,
      "version": 95,
      "versionNonce": 190831581,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "WXA6q_oVjNdBDomPUy2hR"
        }
      ],
      "updated": 1761186175319,
      "link": null,
      "locked": false
    },
    {
      "id": "WXA6q_oVjNdBDomPUy2hR",
      "type": "text",
      "x": 1735.085166496943,
      "y": -8696.963156397753,
      "width": 132,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "az",
      "roundness": null,
      "seed": 668036819,
      "version": 14,
      "versionNonce": 1457975699,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186177554,
      "link": null,
      "locked": false,
      "text": "global layer",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "a5ouNWN22Z2EoFomI9WIy",
      "originalText": "global layer",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "N9M9eeOo480la_h7HOqa-",
      "type": "rectangle",
      "x": 1395.7517619559276,
      "y": -8541.796504989881,
      "width": 810.6666564941406,
      "height": 133.33330790201944,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b00",
      "roundness": {
        "type": 3
      },
      "seed": 213778909,
      "version": 96,
      "versionNonce": 1109962483,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "KrPFvDrfHHF_w749wc3_w"
        },
        {
          "id": "5h_mLfU6_P0-mAVbcleXo",
          "type": "arrow"
        }
      ],
      "updated": 1761186331392,
      "link": null,
      "locked": false
    },
    {
      "id": "KrPFvDrfHHF_w749wc3_w",
      "type": "text",
      "x": 1718.585090202998,
      "y": -8487.629851038871,
      "width": 165,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b01",
      "roundness": null,
      "seed": 166985235,
      "version": 17,
      "versionNonce": 2000256435,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186205458,
      "link": null,
      "locked": false,
      "text": "users worldwide",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "N9M9eeOo480la_h7HOqa-",
      "originalText": "users worldwide",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "gNRGws2e_VJHXtS1VuYG9",
      "type": "rectangle",
      "x": 1425.085105461787,
      "y": -8316.463227605442,
      "width": 794.6666463216143,
      "height": 241.33336385091206,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b02",
      "roundness": {
        "type": 3
      },
      "seed": 1177669565,
      "version": 80,
      "versionNonce": 148706973,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "A-yHT9IXVQ09mfb0Kt_O2"
        },
        {
          "id": "5h_mLfU6_P0-mAVbcleXo",
          "type": "arrow"
        },
        {
          "id": "x-6fyI8e_F5f60Kc_emM0",
          "type": "arrow"
        },
        {
          "id": "wcn_Wa_NbgHUb8fq5y0Sh",
          "type": "arrow"
        },
        {
          "id": "97jW2gw9b87CKmzfAkyAf",
          "type": "arrow"
        }
      ],
      "updated": 1761186335100,
      "link": null,
      "locked": false
    },
    {
      "id": "A-yHT9IXVQ09mfb0Kt_O2",
      "type": "text",
      "x": 1437.418428622594,
      "y": -8258.296545679987,
      "width": 770,
      "height": 125,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b03",
      "roundness": null,
      "seed": 331697853,
      "version": 164,
      "versionNonce": 1232106109,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186299360,
      "link": null,
      "locked": false,
      "text": "route 53/cloudflare for geographical DNS routing to connect to closest\nDC\n- health checks every 10s\n- latency-based routing\n- failover (<30s)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "gNRGws2e_VJHXtS1VuYG9",
      "originalText": "route 53/cloudflare for geographical DNS routing to connect to closest DC\n- health checks every 10s\n- latency-based routing\n- failover (<30s)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "aykrDmL-HS5caUljcZl9n",
      "type": "rectangle",
      "x": 1405.085105461787,
      "y": -7953.796550766249,
      "width": 252.00002034505178,
      "height": 222.66667683919331,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b04",
      "roundness": {
        "type": 3
      },
      "seed": 512341821,
      "version": 59,
      "versionNonce": 15919347,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "VYJzjlxMFcyzyWdO01uRu"
        },
        {
          "id": "x-6fyI8e_F5f60Kc_emM0",
          "type": "arrow"
        }
      ],
      "updated": 1761186332792,
      "link": null,
      "locked": false
    },
    {
      "id": "VYJzjlxMFcyzyWdO01uRu",
      "type": "text",
      "x": 1487.0851156343128,
      "y": -7854.963212346653,
      "width": 88,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b05",
      "roundness": null,
      "seed": 906716893,
      "version": 10,
      "versionNonce": 1906828957,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186310533,
      "link": null,
      "locked": false,
      "text": "US-east ",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "aykrDmL-HS5caUljcZl9n",
      "originalText": "US-east ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "vd20Z2_V-dnEQ9xiJp0Ct",
      "type": "rectangle",
      "x": 1783.7517924735057,
      "y": -7937.796540593723,
      "width": 242.6666259765625,
      "height": 214.66664632161428,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b06",
      "roundness": {
        "type": 3
      },
      "seed": 1034521843,
      "version": 45,
      "versionNonce": 2001875891,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "O3M1oOXlKzPvrKL98DjLC"
        },
        {
          "id": "wcn_Wa_NbgHUb8fq5y0Sh",
          "type": "arrow"
        }
      ],
      "updated": 1761186333873,
      "link": null,
      "locked": false
    },
    {
      "id": "O3M1oOXlKzPvrKL98DjLC",
      "type": "text",
      "x": 1866.585105461787,
      "y": -7842.963217432916,
      "width": 77,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b07",
      "roundness": null,
      "seed": 442196979,
      "version": 9,
      "versionNonce": 1949002387,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186318048,
      "link": null,
      "locked": false,
      "text": "eu-west",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "vd20Z2_V-dnEQ9xiJp0Ct",
      "originalText": "eu-west",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "4XgGDpDnxLOTmHDq_6jLS",
      "type": "rectangle",
      "x": 2142.4184794852245,
      "y": -7935.129863754531,
      "width": 250.66660563151027,
      "height": 206.66666666666697,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b08",
      "roundness": {
        "type": 3
      },
      "seed": 1881135325,
      "version": 49,
      "versionNonce": 1274270557,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "C4eC8J8H5YL-1bHQMRXa3"
        },
        {
          "id": "97jW2gw9b87CKmzfAkyAf",
          "type": "arrow"
        }
      ],
      "updated": 1761186335100,
      "link": null,
      "locked": false
    },
    {
      "id": "C4eC8J8H5YL-1bHQMRXa3",
      "type": "text",
      "x": 2245.7517823009794,
      "y": -7844.2965304211975,
      "width": 44,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b09",
      "roundness": null,
      "seed": 1168277149,
      "version": 10,
      "versionNonce": 544414013,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186337405,
      "link": null,
      "locked": false,
      "text": "APAC",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "4XgGDpDnxLOTmHDq_6jLS",
      "originalText": "APAC",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "5h_mLfU6_P0-mAVbcleXo",
      "type": "arrow",
      "x": 1806.4184184500682,
      "y": -8392.463212346653,
      "width": 0,
      "height": 62.66665140787882,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0A",
      "roundness": null,
      "seed": 218108403,
      "version": 15,
      "versionNonce": 1773951123,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186331392,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          0,
          62.66665140787882
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "N9M9eeOo480la_h7HOqa-",
        "focus": -0.013157882353604539,
        "gap": 15.999984741209119
      },
      "endBinding": {
        "elementId": "gNRGws2e_VJHXtS1VuYG9",
        "focus": -0.04026848300878587,
        "gap": 13.33333333333212
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "x-6fyI8e_F5f60Kc_emM0",
      "type": "arrow",
      "x": 1665.085105461787,
      "y": -8052.463237777967,
      "width": 106.66666666666697,
      "height": 100,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0B",
      "roundness": null,
      "seed": 194307901,
      "version": 18,
      "versionNonce": 1711393619,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186332792,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          -106.66666666666697,
          100
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "gNRGws2e_VJHXtS1VuYG9",
        "focus": 0.00844883240194606,
        "gap": 22.6666259765625
      },
      "endBinding": {
        "elementId": "aykrDmL-HS5caUljcZl9n",
        "focus": -0.36771394773621946,
        "gap": 1.3333129882821595
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "wcn_Wa_NbgHUb8fq5y0Sh",
      "type": "arrow",
      "x": 1866.4184184500682,
      "y": -8055.12986375453,
      "width": 1.33331298828125,
      "height": 106.66666666666697,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0C",
      "roundness": null,
      "seed": 875858045,
      "version": 18,
      "versionNonce": 1126395411,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186333873,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          1.33331298828125,
          106.66666666666697
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "gNRGws2e_VJHXtS1VuYG9",
        "focus": -0.1059109169341301,
        "gap": 20
      },
      "endBinding": {
        "elementId": "vd20Z2_V-dnEQ9xiJp0Ct",
        "focus": -0.2923041267795611,
        "gap": 10.666656494139716
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "97jW2gw9b87CKmzfAkyAf",
      "type": "arrow",
      "x": 2074.418398105016,
      "y": -8063.129894272108,
      "width": 150.66670735677098,
      "height": 117.3333231608076,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0D",
      "roundness": null,
      "seed": 1673853373,
      "version": 25,
      "versionNonce": 93993725,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186335100,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          150.66670735677098,
          117.3333231608076
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "gNRGws2e_VJHXtS1VuYG9",
        "focus": -0.14783047246168884,
        "gap": 11.999969482421875
      },
      "endBinding": {
        "elementId": "4XgGDpDnxLOTmHDq_6jLS",
        "focus": 0.40197925821094077,
        "gap": 10.66670735676962
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "44H7unYOb4yCAdifs0Ht3",
      "type": "rectangle",
      "x": 1273.0850851167347,
      "y": -7621.7965304211975,
      "width": 1241.3334147135415,
      "height": 120,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0E",
      "roundness": {
        "type": 3
      },
      "seed": 467389107,
      "version": 62,
      "versionNonce": 1043553565,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "9fzFYX27rnJyPP4mtfxlS"
        }
      ],
      "updated": 1761186898384,
      "link": null,
      "locked": false
    },
    {
      "id": "9fzFYX27rnJyPP4mtfxlS",
      "type": "text",
      "x": 1701.2517924735055,
      "y": -7574.2965304211975,
      "width": 385,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0F",
      "roundness": null,
      "seed": 10305203,
      "version": 39,
      "versionNonce": 1889456765,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186357647,
      "link": null,
      "locked": false,
      "text": "regional (each region is identical)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "44H7unYOb4yCAdifs0Ht3",
      "originalText": "regional (each region is identical)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "VhesVCsAG-ROEWi_VL4sn",
      "type": "rectangle",
      "x": 1606.4184184500682,
      "y": -7409.796560938776,
      "width": 465.33335367838527,
      "height": 285,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0G",
      "roundness": {
        "type": 3
      },
      "seed": 1702741779,
      "version": 57,
      "versionNonce": 2073063677,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "QGqqurTbNkbOKmDZm1evS"
        },
        {
          "id": "p8T4PxEDSY1lJpfxDzu4J",
          "type": "arrow"
        }
      ],
      "updated": 1761186901048,
      "link": null,
      "locked": false
    },
    {
      "id": "QGqqurTbNkbOKmDZm1evS",
      "type": "text",
      "x": 1619.0850952892608,
      "y": -7404.796560938776,
      "width": 440,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0H",
      "roundness": null,
      "seed": 1009900893,
      "version": 358,
      "versionNonce": 54100275,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186816107,
      "link": null,
      "locked": false,
      "text": "alb \n- ssl termination (decrypt once at lb to\nhttp which is expensive CPU operation,\nand backend use plain http which is\nfaster)\n- health checks ( see if api gw is\nresponding and can also hoirzontally\nscale)\n- distribute load evenly\n- 1 single point (but to prevent spof,\ncan have 1 on standby with heartbeat)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "VhesVCsAG-ROEWi_VL4sn",
      "originalText": "alb \n- ssl termination (decrypt once at lb to http which is expensive CPU operation, and backend use plain http which is faster)\n- health checks ( see if api gw is responding and can also hoirzontally scale)\n- distribute load evenly\n- 1 single point (but to prevent spof, can have 1 on standby with heartbeat)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "YEWnmKagTNY5XcdHmiI9d",
      "type": "rectangle",
      "x": 1617.0851258068387,
      "y": -6944.463207260389,
      "width": 461.33331298828125,
      "height": 247.9999796549473,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0I",
      "roundness": {
        "type": 3
      },
      "seed": 1333989043,
      "version": 104,
      "versionNonce": 394858931,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "s2eGb-LSoiiOM8Pwman4s"
        },
        {
          "id": "p8T4PxEDSY1lJpfxDzu4J",
          "type": "arrow"
        },
        {
          "id": "f-SLq-1o0W14SVD98p0Ac",
          "type": "arrow"
        }
      ],
      "updated": 1761186903060,
      "link": null,
      "locked": false
    },
    {
      "id": "s2eGb-LSoiiOM8Pwman4s",
      "type": "text",
      "x": 1726.7517823009794,
      "y": -6857.963217432915,
      "width": 242,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0J",
      "roundness": null,
      "seed": 1433236179,
      "version": 91,
      "versionNonce": 2041592893,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186819457,
      "link": null,
      "locked": false,
      "text": "api gw instances \n- authentication (jwt)\n-rate limiting",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "YEWnmKagTNY5XcdHmiI9d",
      "originalText": "api gw instances \n- authentication (jwt)\n-rate limiting",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "fMNs-nDe0zGAQF57gB08p",
      "type": "rectangle",
      "x": 1549.0850444266305,
      "y": -6499.12987901332,
      "width": 721.3334147135417,
      "height": 297.3333231608076,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0K",
      "roundness": {
        "type": 3
      },
      "seed": 433895347,
      "version": 104,
      "versionNonce": 1702421651,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "klKr8rlkvSNKaxKc6EBik"
        },
        {
          "id": "f-SLq-1o0W14SVD98p0Ac",
          "type": "arrow"
        },
        {
          "id": "_noYv2chnJkGuFzC9aEnP",
          "type": "arrow"
        }
      ],
      "updated": 1761186905639,
      "link": null,
      "locked": false
    },
    {
      "id": "klKr8rlkvSNKaxKc6EBik",
      "type": "text",
      "x": 1717.2517517834012,
      "y": -6412.963217432916,
      "width": 385,
      "height": 125,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0L",
      "roundness": null,
      "seed": 727578067,
      "version": 122,
      "versionNonce": 619851795,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186876639,
      "link": null,
      "locked": false,
      "text": "1) product service\n2) user service\n3) inventory service\n4) payment service\n5) order service (saga coordinator)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "fMNs-nDe0zGAQF57gB08p",
      "originalText": "1) product service\n2) user service\n3) inventory service\n4) payment service\n5) order service (saga coordinator)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "Ktt4ztVGQwSgrNH6gl8IA",
      "type": "rectangle",
      "x": 1710.4184591401722,
      "y": -6035.129889185845,
      "width": 413.3333333333335,
      "height": 218.66668701171875,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0M",
      "roundness": {
        "type": 3
      },
      "seed": 2023721821,
      "version": 52,
      "versionNonce": 220716371,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "hrOrqMYIjRdAQvOxFv_Ix"
        },
        {
          "id": "_noYv2chnJkGuFzC9aEnP",
          "type": "arrow"
        }
      ],
      "updated": 1761186905639,
      "link": null,
      "locked": false
    },
    {
      "id": "hrOrqMYIjRdAQvOxFv_Ix",
      "type": "text",
      "x": 1763.085125806839,
      "y": -5938.296545679986,
      "width": 308,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0N",
      "roundness": null,
      "seed": 389479635,
      "version": 48,
      "versionNonce": 351255155,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761187105053,
      "link": null,
      "locked": false,
      "text": "service mesh (not zookeeper)",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "Ktt4ztVGQwSgrNH6gl8IA",
      "originalText": "service mesh (not zookeeper)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "p8T4PxEDSY1lJpfxDzu4J",
      "type": "arrow",
      "x": 1834.418398105016,
      "y": -7108.46322251918,
      "width": 1.33331298828125,
      "height": 142.6666259765625,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0P",
      "roundness": null,
      "seed": 1225257171,
      "version": 38,
      "versionNonce": 1370704221,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186901048,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          -1.33331298828125,
          142.6666259765625
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "VhesVCsAG-ROEWi_VL4sn",
        "focus": 0.013599645315980718,
        "gap": 16.333338419595748
      },
      "endBinding": {
        "elementId": "YEWnmKagTNY5XcdHmiI9d",
        "focus": -0.06912497336398904,
        "gap": 21.33338928222838
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "f-SLq-1o0W14SVD98p0Ac",
      "type": "arrow",
      "x": 1870.4184591401722,
      "y": -6677.796566025038,
      "width": 1.33331298828125,
      "height": 157.3333231608076,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0Q",
      "roundness": null,
      "seed": 750528467,
      "version": 21,
      "versionNonce": 1652712275,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761186903060,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          1.33331298828125,
          157.3333231608076
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "YEWnmKagTNY5XcdHmiI9d",
        "focus": -0.0926026601848759,
        "gap": 18.666661580403343
      },
      "endBinding": {
        "elementId": "fMNs-nDe0zGAQF57gB08p",
        "focus": -0.10101309456306881,
        "gap": 21.333363850911155
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "_noYv2chnJkGuFzC9aEnP",
      "type": "arrow",
      "x": 1911.751772128453,
      "y": -6047.129909530897,
      "width": 1.3333129882803405,
      "height": 143.99998982747366,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0R",
      "roundness": null,
      "seed": 435318909,
      "version": 25,
      "versionNonce": 1240701757,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761187097756,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          -1.3333129882803405,
          -143.99998982747366
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "Ktt4ztVGQwSgrNH6gl8IA",
        "focus": -0.02027125385058866,
        "gap": 12.00002034505178
      },
      "endBinding": {
        "elementId": "fMNs-nDe0zGAQF57gB08p",
        "focus": 0.002233376211954549,
        "gap": 10.666656494141534
      },
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "t4PvUw0OOFaqGE6V9BuR6",
      "type": "rectangle",
      "x": 2659.7518026460316,
      "y": -8773.796563481908,
      "width": 1274.6667989095054,
      "height": 7410,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0S",
      "roundness": {
        "type": 3
      },
      "seed": 1719925171,
      "version": 52,
      "versionNonce": 1451660957,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "v9cr-Tn2IkxF0_jYviKl1"
        }
      ],
      "updated": 1761187153248,
      "link": null,
      "locked": false
    },
    {
      "id": "v9cr-Tn2IkxF0_jYviKl1",
      "type": "text",
      "x": 2912.089108350784,
      "y": -8768.796563481908,
      "width": 769.9921875,
      "height": 7400,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b0T",
      "roundness": null,
      "seed": 629181725,
      "version": 4,
      "versionNonce": 1645460221,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1761187153250,
      "link": null,
      "locked": false,
      "text": "## Data Layer (Cross-Region)\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                    CONSENSUS LAYER                               │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                   │\n│   ┌──────────┐         ┌──────────┐         ┌──────────┐       │\n│   │ etcd-US  │◄───────►│ etcd-EU  │◄───────►│etcd-ASIA │       │\n│   │(Raft node│         │(Raft node│         │(Raft node│       │\n│   └────┬─────┘         └────┬─────┘         └────┬─────┘       │\n│        │                    │                     │              │\n│        │ Distributed lock   │                     │              │\n│        │ Leader election    │                     │              │\n│        │ Config management  │                     │              │\n└────────┼────────────────────┼─────────────────────┼──────────────┘\n         │                    │                     │\n         │                    │                     │\n┌────────▼────────────────────▼─────────────────────▼──────────────┐\n│                    DATABASE LAYER                                 │\n├───────────────────────────────────────────────────────────────────┤\n│                                                                    │\n│  PRODUCT CATALOG (AP - Eventual Consistency)                     │\n│  ┌─────────────┐      ┌─────────────┐      ┌─────────────┐     │\n│  │PostgreSQL-US│◄────►│PostgreSQL-EU│◄────►│PostgreSQL-AS│     │\n│  │  + Replica  │ Async│  + Replica  │ Async│  + Replica  │     │\n│  │             │ Repli│             │ Repli│             │     │\n│  │   30GB      │ cation  30GB      │ cation  30GB      │     │\n│  └──────┬──────┘      └──────┬──────┘      └──────┬──────┘     │\n│         │                    │                     │             │\n│    ┌────▼────┐          ┌───▼─────┐          ┌───▼─────┐      │\n│    │ Redis   │          │ Redis   │          │ Redis   │      │\n│    │ Cache   │          │ Cache   │          │ Cache   │      │\n│    └─────────┘          └─────────┘          └─────────┘      │\n│                                                                  │\n├──────────────────────────────────────────────────────────────────┤\n│                                                                  │\n│  PAYMENT & ORDERS (CP - Strong Consistency)                    │\n│  ┌──────────────────────────────────────────────────────────┐  │\n│  │           CockroachDB Cluster                             │  │\n│  │                                                            │  │\n│  │  ┌──────────┐      ┌──────────┐      ┌──────────┐       │  │\n│  │  │ Node-US1 │◄────►│ Node-EU1 │◄────►│Node-ASIA1│       │  │\n│  │  └──────────┘      └──────────┘      └──────────┘       │  │\n│  │       ▲                  ▲                  ▲             │  │\n│  │       │                  │                  │             │  │\n│  │  ┌────┴────┐        ┌───┴─────┐       ┌───┴──────┐      │  │\n│  │  │Node-US2 │        │Node-EU2 │       │Node-ASIA2│      │  │\n│  │  └─────────┘        └─────────┘       └──────────┘      │  │\n│  │                                                            │  │\n│  │  - Automatic sharding & rebalancing                       │  │\n│  │  - Quorum writes (2/3 regions)                           │  │\n│  │  - ACID transactions across regions                      │  │\n│  │  - Handles 50K+ writes/sec                               │  │\n│  └──────────────────────────────────────────────────────────┘  │\n│                                                                  │\n├──────────────────────────────────────────────────────────────────┤\n│                                                                  │\n│  INVENTORY (CP - Quorum Consistency)                            │\n│  Similar to Payment layer - CockroachDB or separate cluster    │\n│                                                                  │\n└──────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Event/Async Processing Layer\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                  KAFKA CLUSTER (Per Region)                      │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                   │\n│   Topics: order.created, payment.completed, inventory.updated   │\n│                                                                   │\n│  ┌──────────┐      ┌──────────┐      ┌──────────┐              │\n│  │ Kafka-US │◄────►│ Kafka-EU │◄────►│Kafka-ASIA│              │\n│  │ (3 nodes)│ Repli│ (3 nodes)│ Repli│ (3 nodes)│              │\n│  └────┬─────┘ cation└────┬─────┘ cation└────┬─────┘              │\n│       │                  │                   │                   │\n│  ┌────▼──────┐      ┌───▼───────┐      ┌───▼────────┐          │\n│  │ Workers:  │      │ Workers:  │      │ Workers:   │          │\n│  │- Email    │      │- Email    │      │- Email     │          │\n│  │- Analytics│      │- Analytics│      │- Analytics │          │\n│  │- Warehouse│      │- Warehouse│      │- Warehouse │          │\n│  │- Notif.   │      │- Notif.   │      │- Notif.    │          │\n│  └───────────┘      └───────────┘      └────────────┘          │\n│                                                                   │\n│  NOT used for critical path! Only for async post-order events   │\n└───────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Order Processing Flow (Saga Pattern)\n```\n┌─────────────────────────────────────────────────────────────────┐\n│              ORDER SAGA (Synchronous Critical Path)              │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                   │\n│  User Request → API Gateway → Order Service (Orchestrator)      │\n│                                                                   │\n│  Step 1: ┌─────────────────────────────────────┐               │\n│          │ Payment Service                      │               │\n│          │  1. Generate idempotency_key         │               │\n│          │  2. Check if already processed       │               │\n│          │  3. Call Stripe API (sync)          │               │\n│          │  4. Save to CockroachDB             │               │\n│          │  Status: COMPLETED ✅                │               │\n│          └──────────┬──────────────────────────┘               │\n│                     │ Success                                    │\n│                     ↓                                            │\n│  Step 2: ┌─────────────────────────────────────┐               │\n│          │ Inventory Service                    │               │\n│          │  1. Check stock availability         │               │\n│          │  2. Reserve with distributed lock    │               │\n│          │  3. Deduct from CockroachDB         │               │\n│          │  Status: RESERVED ✅                 │               │\n│          └──────────┬──────────────────────────┘               │\n│                     │ Success                                    │\n│                     ↓                                            │\n│  Step 3: ┌─────────────────────────────────────┐               │\n│          │ Order Service                        │               │\n│          │  1. Create order record              │               │\n│          │  2. Link payment_id + items         │               │\n│          │  3. Save to CockroachDB             │               │\n│          │  Status: CONFIRMED ✅                │               │\n│          └──────────┬──────────────────────────┘               │\n│                     │ Success                                    │\n│                     ↓                                            │\n│          Return: {\"order_id\": \"12345\", \"status\": \"success\"}    │\n│                                                                   │\n│  Total Time: 1-2 seconds (synchronous)                          │\n│                                                                   │\n│  IF ANY STEP FAILS:                                             │\n│  ┌────────────────────────────────────────────────┐            │\n│  │ Compensating Transactions (Reverse Order)      │            │\n│  │  - Refund payment                               │            │\n│  │  - Release inventory                            │            │\n│  │  - Mark order as failed                        │            │\n│  └────────────────────────────────────────────────┘            │\n│                                                                   │\n│  AFTER Success (Async via Kafka):                              │\n│  ┌────────────────────────────────────────────────┐            │\n│  │  Publish: \"order.created\" event                │            │\n│  │   ↓                                             │            │\n│  │  Workers consume:                               │            │\n│  │   - Send confirmation email                    │            │\n│  │   - Update analytics dashboard                 │            │\n│  │   - Notify warehouse to ship                   │            │\n│  │   - Update recommendation engine               │            │\n│  └────────────────────────────────────────────────┘            │\n│                                                                   │\n└───────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Failover Scenarios\n\n### Scenario 1: Single Region Failure (US-EAST Dies)\n```\nBEFORE:\n┌─────────┐  ┌─────────┐  ┌─────────┐\n│ US-EAST │  │ EU-WEST │  │ASIA-PAC │\n│ (40%    │  │ (30%    │  │ (30%    │\n│ traffic)│  │ traffic)│  │ traffic)│\n└─────────┘  └─────────┘  └─────────┘\n\n💥 US-EAST FAILS\n\nAFTER (within 30s):\n┌─────────┐  ┌─────────┐  ┌─────────┐\n│ US-EAST │  │ EU-WEST │  │ASIA-PAC │\n│   ❌    │  │ (50%    │  │ (50%    │\n│  DOWN   │  │ traffic)│  │ traffic)│\n└─────────┘  └─────────┘  └─────────┘\n\nWhat Happens:\n1. Route53 health checks fail (10s)\n2. DNS updated to remove US-EAST (10s)\n3. Traffic redistributes to EU + ASIA (10s)\n4. CockroachDB: US nodes partitioned\n   - Quorum still available (EU + ASIA = 2/3)\n   - Writes continue to EU/ASIA nodes\n5. User sessions: Sticky sessions route to new region\n6. Shopping carts: Recovered from CockroachDB\n\nTotal Downtime: ~30 seconds for US users\nImpact: EU/ASIA users unaffected\n```\n\n---\n\n### Scenario 2: Network Partition (US isolated from EU+ASIA)\n```\nBEFORE:\n┌─────────┐\n│ US-EAST │◄────────┐\n└─────────┘         │\n     ▲              │\n     │              │\n     │              │\n┌────┴────┐    ┌───▼─────┐\n│ EU-WEST │◄───│ASIA-PAC │\n└─────────┘    └─────────┘\n\n🔥 NETWORK PARTITION\n\nAFTER:\n┌─────────┐\n│ US-EAST │ ← ISOLATED\n└─────────┘\n    ❌ Can't reach etcd quorum (1/3)\n    ❌ Can't be primary for PostgreSQL\n    ✅ Becomes READ-ONLY mode\n\n┌─────────┐    ┌─────────┐\n│ EU-WEST │◄───│ASIA-PAC │\n└─────────┘    └─────────┘\n    ✅ Have etcd quorum (2/3)\n    ✅ EU acquires primary lock\n    ✅ ACCEPTS WRITES\n\nWhat Happens:\n1. etcd detects partition (30s)\n2. US Patroni: Can't renew lock → Demotes to replica\n3. EU Patroni: Acquires lock → Becomes primary\n4. US users: Route53 redirects to EU/ASIA\n5. Split-brain prevented ✅\n\nRecovery:\n- Network heals\n- US Patroni: Syncs from primary (EU)\n- Gradually add US back to rotation\n```\n\n---\n\n### Scenario 3: Payment Mid-Flight During Failover\n```\nTimeline:\n0s:  User clicks \"Pay $100\" → Routed to US region\n1s:  Order Service starts Saga\n2s:  Payment Service calls Stripe → ✅ $100 charged\n3s:  💥 US REGION CRASHES\n4s:  User's request times out (no response)\n5s:  Route53 detects failure\n6s:  User auto-retries → Routed to EU region\n\nWITHOUT idempotency key:\n- EU region processes as new request\n- Charges $100 again\n- ❌ User charged $200!\n\nWITH idempotency key:\n7s:  EU receives retry with idempotency_key=\"abc123\"\n8s:  EU checks CockroachDB: \"abc123 already processed in US\"\n9s:  EU returns: \"Payment already completed, order_id=456\"\n10s: ✅ User sees order confirmation, charged once!\n\nHow it works:\n- Idempotency key stored in CockroachDB (replicated)\n- Even though US crashed, EU has the payment record\n- Duplicate detection works across regions\n```\n\n---\n\n## Monitoring & Health Checks\n```\n┌────────────────────────────────────────────────────────────┐\n│                  MONITORING STACK                          │\n├────────────────────────────────────────────────────────────┤\n│                                                              │\n│  ┌──────────────┐   ┌──────────────┐   ┌──────────────┐  │\n│  │ Prometheus   │   │  Grafana     │   │  PagerDuty   │  │\n│  │ (Metrics)    │──►│ (Dashboards) │──►│  (Alerts)    │  │\n│  └──────────────┘   └──────────────┘   └──────────────┘  │\n│         ▲                                                   │\n│         │ Scrapes metrics every 15s                        │\n│         │                                                   │\n│  ┌──────┴──────────────────────────────────────────────┐  │\n│  │  Health Check Endpoints (each service):             │  │\n│  │   /health/liveness  - Is service running?           │  │\n│  │   /health/readiness - Can it handle traffic?        │  │\n│  │   /health/startup   - Did it start successfully?    │  │\n│  └──────────────────────────────────────────────────────┘  │\n│                                                              │\n│  Key Metrics:                                              │\n│  - Request latency (p50, p95, p99)                        │\n│  - Error rate (5xx responses)                             │\n│  - Database connection pool usage                         │\n│  - CockroachDB quorum status                              │\n│  - Kafka consumer lag                                      │\n│  - Payment success rate                                    │\n│                                                              │\n└──────────────────────────────────────────────────────────────┘",
      "fontSize": 20,
      "fontFamily": 8,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "t4PvUw0OOFaqGE6V9BuR6",
      "originalText": "## Data Layer (Cross-Region)\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                    CONSENSUS LAYER                               │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                   │\n│   ┌──────────┐         ┌──────────┐         ┌──────────┐       │\n│   │ etcd-US  │◄───────►│ etcd-EU  │◄───────►│etcd-ASIA │       │\n│   │(Raft node│         │(Raft node│         │(Raft node│       │\n│   └────┬─────┘         └────┬─────┘         └────┬─────┘       │\n│        │                    │                     │              │\n│        │ Distributed lock   │                     │              │\n│        │ Leader election    │                     │              │\n│        │ Config management  │                     │              │\n└────────┼────────────────────┼─────────────────────┼──────────────┘\n         │                    │                     │\n         │                    │                     │\n┌────────▼────────────────────▼─────────────────────▼──────────────┐\n│                    DATABASE LAYER                                 │\n├───────────────────────────────────────────────────────────────────┤\n│                                                                    │\n│  PRODUCT CATALOG (AP - Eventual Consistency)                     │\n│  ┌─────────────┐      ┌─────────────┐      ┌─────────────┐     │\n│  │PostgreSQL-US│◄────►│PostgreSQL-EU│◄────►│PostgreSQL-AS│     │\n│  │  + Replica  │ Async│  + Replica  │ Async│  + Replica  │     │\n│  │             │ Repli│             │ Repli│             │     │\n│  │   30GB      │ cation  30GB      │ cation  30GB      │     │\n│  └──────┬──────┘      └──────┬──────┘      └──────┬──────┘     │\n│         │                    │                     │             │\n│    ┌────▼────┐          ┌───▼─────┐          ┌───▼─────┐      │\n│    │ Redis   │          │ Redis   │          │ Redis   │      │\n│    │ Cache   │          │ Cache   │          │ Cache   │      │\n│    └─────────┘          └─────────┘          └─────────┘      │\n│                                                                  │\n├──────────────────────────────────────────────────────────────────┤\n│                                                                  │\n│  PAYMENT & ORDERS (CP - Strong Consistency)                    │\n│  ┌──────────────────────────────────────────────────────────┐  │\n│  │           CockroachDB Cluster                             │  │\n│  │                                                            │  │\n│  │  ┌──────────┐      ┌──────────┐      ┌──────────┐       │  │\n│  │  │ Node-US1 │◄────►│ Node-EU1 │◄────►│Node-ASIA1│       │  │\n│  │  └──────────┘      └──────────┘      └──────────┘       │  │\n│  │       ▲                  ▲                  ▲             │  │\n│  │       │                  │                  │             │  │\n│  │  ┌────┴────┐        ┌───┴─────┐       ┌───┴──────┐      │  │\n│  │  │Node-US2 │        │Node-EU2 │       │Node-ASIA2│      │  │\n│  │  └─────────┘        └─────────┘       └──────────┘      │  │\n│  │                                                            │  │\n│  │  - Automatic sharding & rebalancing                       │  │\n│  │  - Quorum writes (2/3 regions)                           │  │\n│  │  - ACID transactions across regions                      │  │\n│  │  - Handles 50K+ writes/sec                               │  │\n│  └──────────────────────────────────────────────────────────┘  │\n│                                                                  │\n├──────────────────────────────────────────────────────────────────┤\n│                                                                  │\n│  INVENTORY (CP - Quorum Consistency)                            │\n│  Similar to Payment layer - CockroachDB or separate cluster    │\n│                                                                  │\n└──────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Event/Async Processing Layer\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                  KAFKA CLUSTER (Per Region)                      │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                   │\n│   Topics: order.created, payment.completed, inventory.updated   │\n│                                                                   │\n│  ┌──────────┐      ┌──────────┐      ┌──────────┐              │\n│  │ Kafka-US │◄────►│ Kafka-EU │◄────►│Kafka-ASIA│              │\n│  │ (3 nodes)│ Repli│ (3 nodes)│ Repli│ (3 nodes)│              │\n│  └────┬─────┘ cation└────┬─────┘ cation└────┬─────┘              │\n│       │                  │                   │                   │\n│  ┌────▼──────┐      ┌───▼───────┐      ┌───▼────────┐          │\n│  │ Workers:  │      │ Workers:  │      │ Workers:   │          │\n│  │- Email    │      │- Email    │      │- Email     │          │\n│  │- Analytics│      │- Analytics│      │- Analytics │          │\n│  │- Warehouse│      │- Warehouse│      │- Warehouse │          │\n│  │- Notif.   │      │- Notif.   │      │- Notif.    │          │\n│  └───────────┘      └───────────┘      └────────────┘          │\n│                                                                   │\n│  NOT used for critical path! Only for async post-order events   │\n└───────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Order Processing Flow (Saga Pattern)\n```\n┌─────────────────────────────────────────────────────────────────┐\n│              ORDER SAGA (Synchronous Critical Path)              │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                   │\n│  User Request → API Gateway → Order Service (Orchestrator)      │\n│                                                                   │\n│  Step 1: ┌─────────────────────────────────────┐               │\n│          │ Payment Service                      │               │\n│          │  1. Generate idempotency_key         │               │\n│          │  2. Check if already processed       │               │\n│          │  3. Call Stripe API (sync)          │               │\n│          │  4. Save to CockroachDB             │               │\n│          │  Status: COMPLETED ✅                │               │\n│          └──────────┬──────────────────────────┘               │\n│                     │ Success                                    │\n│                     ↓                                            │\n│  Step 2: ┌─────────────────────────────────────┐               │\n│          │ Inventory Service                    │               │\n│          │  1. Check stock availability         │               │\n│          │  2. Reserve with distributed lock    │               │\n│          │  3. Deduct from CockroachDB         │               │\n│          │  Status: RESERVED ✅                 │               │\n│          └──────────┬──────────────────────────┘               │\n│                     │ Success                                    │\n│                     ↓                                            │\n│  Step 3: ┌─────────────────────────────────────┐               │\n│          │ Order Service                        │               │\n│          │  1. Create order record              │               │\n│          │  2. Link payment_id + items         │               │\n│          │  3. Save to CockroachDB             │               │\n│          │  Status: CONFIRMED ✅                │               │\n│          └──────────┬──────────────────────────┘               │\n│                     │ Success                                    │\n│                     ↓                                            │\n│          Return: {\"order_id\": \"12345\", \"status\": \"success\"}    │\n│                                                                   │\n│  Total Time: 1-2 seconds (synchronous)                          │\n│                                                                   │\n│  IF ANY STEP FAILS:                                             │\n│  ┌────────────────────────────────────────────────┐            │\n│  │ Compensating Transactions (Reverse Order)      │            │\n│  │  - Refund payment                               │            │\n│  │  - Release inventory                            │            │\n│  │  - Mark order as failed                        │            │\n│  └────────────────────────────────────────────────┘            │\n│                                                                   │\n│  AFTER Success (Async via Kafka):                              │\n│  ┌────────────────────────────────────────────────┐            │\n│  │  Publish: \"order.created\" event                │            │\n│  │   ↓                                             │            │\n│  │  Workers consume:                               │            │\n│  │   - Send confirmation email                    │            │\n│  │   - Update analytics dashboard                 │            │\n│  │   - Notify warehouse to ship                   │            │\n│  │   - Update recommendation engine               │            │\n│  └────────────────────────────────────────────────┘            │\n│                                                                   │\n└───────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Failover Scenarios\n\n### Scenario 1: Single Region Failure (US-EAST Dies)\n```\nBEFORE:\n┌─────────┐  ┌─────────┐  ┌─────────┐\n│ US-EAST │  │ EU-WEST │  │ASIA-PAC │\n│ (40%    │  │ (30%    │  │ (30%    │\n│ traffic)│  │ traffic)│  │ traffic)│\n└─────────┘  └─────────┘  └─────────┘\n\n💥 US-EAST FAILS\n\nAFTER (within 30s):\n┌─────────┐  ┌─────────┐  ┌─────────┐\n│ US-EAST │  │ EU-WEST │  │ASIA-PAC │\n│   ❌    │  │ (50%    │  │ (50%    │\n│  DOWN   │  │ traffic)│  │ traffic)│\n└─────────┘  └─────────┘  └─────────┘\n\nWhat Happens:\n1. Route53 health checks fail (10s)\n2. DNS updated to remove US-EAST (10s)\n3. Traffic redistributes to EU + ASIA (10s)\n4. CockroachDB: US nodes partitioned\n   - Quorum still available (EU + ASIA = 2/3)\n   - Writes continue to EU/ASIA nodes\n5. User sessions: Sticky sessions route to new region\n6. Shopping carts: Recovered from CockroachDB\n\nTotal Downtime: ~30 seconds for US users\nImpact: EU/ASIA users unaffected\n```\n\n---\n\n### Scenario 2: Network Partition (US isolated from EU+ASIA)\n```\nBEFORE:\n┌─────────┐\n│ US-EAST │◄────────┐\n└─────────┘         │\n     ▲              │\n     │              │\n     │              │\n┌────┴────┐    ┌───▼─────┐\n│ EU-WEST │◄───│ASIA-PAC │\n└─────────┘    └─────────┘\n\n🔥 NETWORK PARTITION\n\nAFTER:\n┌─────────┐\n│ US-EAST │ ← ISOLATED\n└─────────┘\n    ❌ Can't reach etcd quorum (1/3)\n    ❌ Can't be primary for PostgreSQL\n    ✅ Becomes READ-ONLY mode\n\n┌─────────┐    ┌─────────┐\n│ EU-WEST │◄───│ASIA-PAC │\n└─────────┘    └─────────┘\n    ✅ Have etcd quorum (2/3)\n    ✅ EU acquires primary lock\n    ✅ ACCEPTS WRITES\n\nWhat Happens:\n1. etcd detects partition (30s)\n2. US Patroni: Can't renew lock → Demotes to replica\n3. EU Patroni: Acquires lock → Becomes primary\n4. US users: Route53 redirects to EU/ASIA\n5. Split-brain prevented ✅\n\nRecovery:\n- Network heals\n- US Patroni: Syncs from primary (EU)\n- Gradually add US back to rotation\n```\n\n---\n\n### Scenario 3: Payment Mid-Flight During Failover\n```\nTimeline:\n0s:  User clicks \"Pay $100\" → Routed to US region\n1s:  Order Service starts Saga\n2s:  Payment Service calls Stripe → ✅ $100 charged\n3s:  💥 US REGION CRASHES\n4s:  User's request times out (no response)\n5s:  Route53 detects failure\n6s:  User auto-retries → Routed to EU region\n\nWITHOUT idempotency key:\n- EU region processes as new request\n- Charges $100 again\n- ❌ User charged $200!\n\nWITH idempotency key:\n7s:  EU receives retry with idempotency_key=\"abc123\"\n8s:  EU checks CockroachDB: \"abc123 already processed in US\"\n9s:  EU returns: \"Payment already completed, order_id=456\"\n10s: ✅ User sees order confirmation, charged once!\n\nHow it works:\n- Idempotency key stored in CockroachDB (replicated)\n- Even though US crashed, EU has the payment record\n- Duplicate detection works across regions\n```\n\n---\n\n## Monitoring & Health Checks\n```\n┌────────────────────────────────────────────────────────────┐\n│                  MONITORING STACK                          │\n├────────────────────────────────────────────────────────────┤\n│                                                              │\n│  ┌──────────────┐   ┌──────────────┐   ┌──────────────┐  │\n│  │ Prometheus   │   │  Grafana     │   │  PagerDuty   │  │\n│  │ (Metrics)    │──►│ (Dashboards) │──►│  (Alerts)    │  │\n│  └──────────────┘   └──────────────┘   └──────────────┘  │\n│         ▲                                                   │\n│         │ Scrapes metrics every 15s                        │\n│         │                                                   │\n│  ┌──────┴──────────────────────────────────────────────┐  │\n│  │  Health Check Endpoints (each service):             │  │\n│  │   /health/liveness  - Is service running?           │  │\n│  │   /health/readiness - Can it handle traffic?        │  │\n│  │   /health/startup   - Did it start successfully?    │  │\n│  └──────────────────────────────────────────────────────┘  │\n│                                                              │\n│  Key Metrics:                                              │\n│  - Request latency (p50, p95, p99)                        │\n│  - Error rate (5xx responses)                             │\n│  - Database connection pool usage                         │\n│  - CockroachDB quorum status                              │\n│  - Kafka consumer lag                                      │\n│  - Payment success rate                                    │\n│                                                              │\n└──────────────────────────────────────────────────────────────┘",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}
