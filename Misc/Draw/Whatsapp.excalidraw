{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "type": "text",
      "version": 478,
      "versionNonce": 1689893558,
      "isDeleted": false,
      "id": "VyJw-9UnVO85Ai-VUsjAZ",
      "fillStyle": "cross-hatch",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 242.4453125,
      "y": 130.71484375,
      "strokeColor": "#000000",
      "backgroundColor": "#fff",
      "width": 665.927734375,
      "height": 46,
      "seed": 896043666,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 36,
      "fontFamily": 1,
      "text": "Design Facebook Messenger/WhatsApp",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Design Facebook Messenger/WhatsApp",
      "lineHeight": 1.2777777777777777,
      "index": "a0",
      "autoResize": true
    },
    {
      "type": "text",
      "version": 2747,
      "versionNonce": 685568938,
      "isDeleted": false,
      "id": "rJNp2O8hJaAFg3kMyMk_Z",
      "fillStyle": "cross-hatch",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 256.9455431472643,
      "y": 194.6240890310795,
      "strokeColor": "#000",
      "backgroundColor": "#000",
      "width": 33,
      "height": 45,
      "seed": 967341710,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 33.23791410279167,
      "fontFamily": 1,
      "text": "✨",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "✨",
      "lineHeight": 1.3538755729626375,
      "index": "a1",
      "autoResize": true
    },
    {
      "type": "text",
      "version": 3550,
      "versionNonce": 375190518,
      "isDeleted": false,
      "id": "vqMVltV12q_NqgH7tTBfp",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 303.89692337950237,
      "y": 206.90406208017828,
      "strokeColor": "#495057",
      "backgroundColor": "#fff",
      "width": 186.1759033203125,
      "height": 20,
      "seed": 582382798,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "Functional Requirements",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Functional Requirements",
      "lineHeight": 1.25,
      "index": "a2",
      "autoResize": true
    },
    {
      "type": "line",
      "version": 1836,
      "versionNonce": 1091890794,
      "isDeleted": false,
      "id": "2GWYHE69MwgPJSZdMMqHq",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 257.6696328691687,
      "y": 242.08984497835934,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 165.2005648542745,
      "height": 0.8295616012067057,
      "seed": 770353934,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          165.2005648542745,
          0.8295616012067057
        ]
      ],
      "index": "a3",
      "polygon": false
    },
    {
      "type": "text",
      "version": 1926,
      "versionNonce": 157191286,
      "isDeleted": false,
      "id": "iIdO4f73th-8rX4KYwiIm",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 264.75891966469817,
      "y": 261.45353346486024,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#fefefe",
      "width": 426.57958984375,
      "height": 175,
      "seed": 700324174,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415953552,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "1. Support group chats with up to 10 users\n2. Sending messages\n3. Receive messages in real time\n4. Persist messages so that users can\naccess them from other devices/load other\nconversations\n5. support other devices and media types",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. Support group chats with up to 10 users\n2. Sending messages\n3. Receive messages in real time\n4. Persist messages so that users can\naccess them from other devices/load other\nconversations\n5. support other devices and media types",
      "lineHeight": 1.25,
      "index": "a4",
      "autoResize": true
    },
    {
      "type": "rectangle",
      "version": 2439,
      "versionNonce": 1845465386,
      "isDeleted": false,
      "id": "m-EddKns-1R41v_YIRSCg",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 250.90134776616696,
      "y": 190.4848260003704,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 472.07621071766613,
      "height": 253.04987924925925,
      "seed": 764002190,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "index": "a5"
    },
    {
      "type": "text",
      "version": 5967,
      "versionNonce": 990356842,
      "isDeleted": false,
      "id": "es-dVSBh_mMs5UJW248CZ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 739.9860620920408,
      "y": 257.8268981076844,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 467.4195556640625,
      "height": 390,
      "seed": 887144462,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760416289948,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "1. 1 bil total users\n2. Each user sends 100 messages a day\n3. Each message is around 100 bytes\n4. 1 bil * 100 msgs * 100 bytes = 10^13 bytes\n= 10 TB\n\ncap theorem:\nconsistency = all users see SAME data at\nsame time across all servers\n\nAP with eventual consistency is better. Users\nexpect to send & receive messages even with \nnetwork issue and its ok to show slightly stale\ndata than block messaging entirely\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. 1 bil total users\n2. Each user sends 100 messages a day\n3. Each message is around 100 bytes\n4. 1 bil * 100 msgs * 100 bytes = 10^13 bytes\n= 10 TB\n\ncap theorem:\nconsistency = all users see SAME data at\nsame time across all servers\n\nAP with eventual consistency is better. Users\nexpect to send & receive messages even with \nnetwork issue and its ok to show slightly stale\ndata than block messaging entirely\n",
      "lineHeight": 1.3,
      "index": "a6",
      "autoResize": true
    },
    {
      "type": "text",
      "version": 4485,
      "versionNonce": 347543030,
      "isDeleted": false,
      "id": "Cw43clLeqn0rfJoDKy3Mf",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 784.4051289447384,
      "y": 201.18216987458527,
      "strokeColor": "#495057",
      "backgroundColor": "#fff",
      "width": 215.43988037109375,
      "height": 20,
      "seed": 1932103246,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415898060,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "Non functional requirements",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Non functional requirements",
      "lineHeight": 1.25,
      "index": "a7",
      "autoResize": true
    },
    {
      "type": "line",
      "version": 2642,
      "versionNonce": 652455862,
      "isDeleted": false,
      "id": "NeA7LWd6grc004a60g4rj",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 736.6079796031318,
      "y": 240.22947912111067,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 263.6620648633493,
      "height": 1.238537448047282,
      "seed": 62821518,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          263.6620648633493,
          -1.238537448047282
        ]
      ],
      "index": "a8",
      "polygon": false
    },
    {
      "type": "rectangle",
      "version": 2976,
      "versionNonce": 920830134,
      "isDeleted": false,
      "id": "YnCrK1eaDRgJugNOfGOGz",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 727.6954151489795,
      "y": 190.82273188416093,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 464.382607202041,
      "height": 478.40819168267234,
      "seed": 1079562958,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760416121137,
      "link": null,
      "locked": false,
      "index": "a9"
    },
    {
      "type": "text",
      "version": 3500,
      "versionNonce": 1233144054,
      "isDeleted": false,
      "id": "wvByBEpLA1ci8sYaPG6Av",
      "fillStyle": "cross-hatch",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 734.805833674608,
      "y": 194.07874684580474,
      "strokeColor": "#000",
      "backgroundColor": "#000",
      "width": 36,
      "height": 49.15083451704544,
      "seed": 1670465806,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 36.30380479462411,
      "fontFamily": 1,
      "text": "✉️",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "✉️",
      "lineHeight": 1.353875572962637,
      "index": "aA",
      "autoResize": true
    },
    {
      "type": "rectangle",
      "version": 2946,
      "versionNonce": 1972114922,
      "isDeleted": false,
      "id": "L_ZHTbDehz_-MJZS1M6XR",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 252.52709588292237,
      "y": 679.623417100209,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 942.6470911842608,
      "height": 1093.8255604309952,
      "seed": 124291410,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760417433120,
      "link": null,
      "locked": false,
      "index": "aB"
    },
    {
      "type": "text",
      "version": 3867,
      "versionNonce": 423694454,
      "isDeleted": false,
      "id": "Qr8kzSnfEQPAeLquWjnP3",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 256.9181761200852,
      "y": 651.8242943517002,
      "strokeColor": "#495057",
      "backgroundColor": "#fff",
      "width": 132.81593322753906,
      "height": 20,
      "seed": 1427102930,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760416107546,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "High Level Design",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "High Level Design",
      "lineHeight": 1.25,
      "index": "aD",
      "autoResize": true
    },
    {
      "type": "text",
      "version": 3102,
      "versionNonce": 1940547958,
      "isDeleted": false,
      "id": "lx2X8KGWP_0yUt_7O-27Z",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 267.4964681040723,
      "y": 692.5583024808944,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#fefefe",
      "width": 916.7991943359375,
      "height": 1196,
      "seed": 1083723858,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760417718283,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Flow: \nUser request -> Load Balancer -> \n\n1. Users Database & UserChat Db\n\nWe should be able to fetch all chats for a given user.\n-> Want all chatIds for given user to be on same shard and reduce expensive cross-shard\nqueries\n-> So hash-based partition on user_id\n\nuserId | chat Id\n3      | 12\n3      | 19\n10     | 12\n10     | 65\n\ncausal dependency write conflict issue:\ncasual dependency - operations that depend on each other\n\n if 2 servers try to add different people to group chat at same time:\nServer 1 (US):                    Server 2 (EU):\nAlice adds Charlie to chat        Bob adds David to chat\nchatMembers = [Alice, Bob]        chatMembers = [Alice, Bob]\n   ↓                                 ↓\nchatMembers = [Alice, Bob, Charlie]  chatMembers = [Alice, Bob, David]\n\nWhen they sync, there is conflict.\nFor messages where there should be high throughput, we should be using vector clocks but\nsince user db isnt bottleneck, we can just use single leader replication. Single leader decides\norder then replicates to follower servers.\n\nThis DB likely not a performance bottleneck, let's just use PostgreSQL\n\n-- Table 1: User Profile\nUsers: userId (PK), email, passwordHash, name, phone, created_at\n\n-- Table 2: User-Chat Membership (might need more scalable cuz it grows with every chat\nlike 1 user x 100 messages = 100 rows and 2 bil users x 50 chat = 100 bil rows so \nCassandra)\nUserChats: userId, chatId, joined_at, role\n\n\n\n\n\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Flow: \nUser request -> Load Balancer -> \n\n1. Users Database & UserChat Db\n\nWe should be able to fetch all chats for a given user.\n-> Want all chatIds for given user to be on same shard and reduce expensive cross-shard\nqueries\n-> So hash-based partition on user_id\n\nuserId | chat Id\n3      | 12\n3      | 19\n10     | 12\n10     | 65\n\ncausal dependency write conflict issue:\ncasual dependency - operations that depend on each other\n\n if 2 servers try to add different people to group chat at same time:\nServer 1 (US):                    Server 2 (EU):\nAlice adds Charlie to chat        Bob adds David to chat\nchatMembers = [Alice, Bob]        chatMembers = [Alice, Bob]\n   ↓                                 ↓\nchatMembers = [Alice, Bob, Charlie]  chatMembers = [Alice, Bob, David]\n\nWhen they sync, there is conflict.\nFor messages where there should be high throughput, we should be using vector clocks but\nsince user db isnt bottleneck, we can just use single leader replication. Single leader decides\norder then replicates to follower servers.\n\nThis DB likely not a performance bottleneck, let's just use PostgreSQL\n\n-- Table 1: User Profile\nUsers: userId (PK), email, passwordHash, name, phone, created_at\n\n-- Table 2: User-Chat Membership (might need more scalable cuz it grows with every chat\nlike 1 user x 100 messages = 100 rows and 2 bil users x 50 chat = 100 bil rows so \nCassandra)\nUserChats: userId, chatId, joined_at, role\n\n\n\n\n\n",
      "lineHeight": 1.3,
      "index": "aF",
      "autoResize": true
    },
    {
      "type": "rectangle",
      "version": 2882,
      "versionNonce": 1493821162,
      "isDeleted": false,
      "id": "vTk2uaG9G4v82slfpHpPW",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 1207.858791325946,
      "y": 185.09234761333641,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 908.4307242809056,
      "height": 1457.3983464515795,
      "seed": 880755342,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760420621193,
      "link": null,
      "locked": false,
      "index": "aG"
    },
    {
      "type": "text",
      "version": 2986,
      "versionNonce": 1431251370,
      "isDeleted": false,
      "id": "MTvWU4cfCExWFl-8goZE1",
      "fillStyle": "cross-hatch",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 1222.7530478827173,
      "y": 200.89206174388642,
      "strokeColor": "#000",
      "backgroundColor": "#000",
      "width": 33,
      "height": 45,
      "seed": 819183822,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 33.23791410279167,
      "fontFamily": 1,
      "text": "✨",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "✨",
      "lineHeight": 1.3538755729626375,
      "index": "aH",
      "autoResize": true
    },
    {
      "type": "text",
      "version": 3857,
      "versionNonce": 1238441462,
      "isDeleted": false,
      "id": "95udZlQmO2JlHPh8diLGX",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 1269.7044281149554,
      "y": 213.17203479298155,
      "strokeColor": "#495057",
      "backgroundColor": "#fff",
      "width": 224.19189453125,
      "height": 20,
      "seed": 578713358,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "High Level Design (continued)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "High Level Design (continued)",
      "lineHeight": 1.25,
      "index": "aI",
      "autoResize": true
    },
    {
      "type": "line",
      "version": 2075,
      "versionNonce": 1305502826,
      "isDeleted": false,
      "id": "ej_Ga2pTXng3-XhQS4i39",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 1223.4771376046217,
      "y": 248.3578176911626,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 165.2005648542745,
      "height": 0.8295616012067057,
      "seed": 1912104270,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          165.2005648542745,
          0.8295616012067057
        ]
      ],
      "index": "aJ",
      "polygon": false
    },
    {
      "type": "text",
      "version": 4860,
      "versionNonce": 444461418,
      "isDeleted": false,
      "id": "fIfpwytlFPqBfGKoOa7wC",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1220.3194017917292,
      "y": 271.07377265135074,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#fefefe",
      "width": 902.3391723632812,
      "height": 1300,
      "seed": 278563726,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760422903976,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Chat/Message DB -> Cassandra (leaderless,\nhigh write throughput, AP so meets non-functional req)\nwe can adjust Quorum for impt messages to increase consistency\nLeaderless replication = high availability (AP system) look at my github blog\n\nHBase is for CP and is leader-based but both use LSM trees that are optimised for \nwrites\n\nWe want to make sure that getting all the messages for a given chat\nis fast!\n\nSchema: chatId (partition key), timestamp (clustering key), message, metadata\n         2                     1000                      \"Hiii\"      From: Joe\n         2                     1003                      \"Yoo\"      From: Jack\n\nbut if timestamp is same like 1000 for both messages, we dk which message is earlier so\nclustering key better is (timestamp, message_id)\nMessages for chat already on same partition and pre-sorted!\n\nDont say lets choose Cassandra right away! Discuss!\nShould we optimise for read/write?\n1) r:w is 2:1 but most reads are recent messages so its write-heavy workload\n2) choose between B-tree based db (postgresql) that is optimised for reads VS\nLSM-tree based db (Cassandra) that is optimised for writes\n3) LSm trees are fast cuz writes go to in-memory DS called MemTable then flushed to\ndisk sequentially so theres no random i/o. This is faster than B-tree that needs random\ndisk access to update tree nodes. \n\nBut trade-off is reads are slightly slower but we can optimise by caching recent messages\nin Redis\n\nMessage Delivery:\nClient message to Chat Server via WEbsocket-> Message service (Assign UUID, \nvalidation) -> Kafka (partitioned on chatId)\n-> worker nodes write to Cassandra (partitioned on chatId), \nIndex in ES and analytics as optional consumers\n\nKafka as buffer to handle spikes and decouple storage from routing\n\nMessage Routing: (discuss push vs pull)\nChat server -> connection service (redis that maps userId -> chatServerId) gets\nreceipient locations-> Kafka -> Recipient chat servers -> websocket push to clients\n                                                      -> if offline, push notification (fcm) \n                                                          + store in Cassandra\n\nConnection management:\n1 websocket/user and device\nupdated on connect/disconnect\n \n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Chat/Message DB -> Cassandra (leaderless,\nhigh write throughput, AP so meets non-functional req)\nwe can adjust Quorum for impt messages to increase consistency\nLeaderless replication = high availability (AP system) look at my github blog\n\nHBase is for CP and is leader-based but both use LSM trees that are optimised for \nwrites\n\nWe want to make sure that getting all the messages for a given chat\nis fast!\n\nSchema: chatId (partition key), timestamp (clustering key), message, metadata\n         2                     1000                      \"Hiii\"      From: Joe\n         2                     1003                      \"Yoo\"      From: Jack\n\nbut if timestamp is same like 1000 for both messages, we dk which message is earlier so\nclustering key better is (timestamp, message_id)\nMessages for chat already on same partition and pre-sorted!\n\nDont say lets choose Cassandra right away! Discuss!\nShould we optimise for read/write?\n1) r:w is 2:1 but most reads are recent messages so its write-heavy workload\n2) choose between B-tree based db (postgresql) that is optimised for reads VS\nLSM-tree based db (Cassandra) that is optimised for writes\n3) LSm trees are fast cuz writes go to in-memory DS called MemTable then flushed to\ndisk sequentially so theres no random i/o. This is faster than B-tree that needs random\ndisk access to update tree nodes. \n\nBut trade-off is reads are slightly slower but we can optimise by caching recent messages\nin Redis\n\nMessage Delivery:\nClient message to Chat Server via WEbsocket-> Message service (Assign UUID, \nvalidation) -> Kafka (partitioned on chatId)\n-> worker nodes write to Cassandra (partitioned on chatId), \nIndex in ES and analytics as optional consumers\n\nKafka as buffer to handle spikes and decouple storage from routing\n\nMessage Routing: (discuss push vs pull)\nChat server -> connection service (redis that maps userId -> chatServerId) gets\nreceipient locations-> Kafka -> Recipient chat servers -> websocket push to clients\n                                                      -> if offline, push notification (fcm) \n                                                          + store in Cassandra\n\nConnection management:\n1 websocket/user and device\nupdated on connect/disconnect\n \n",
      "lineHeight": 1.3,
      "index": "aK",
      "autoResize": true
    },
    {
      "type": "rectangle",
      "version": 2722,
      "versionNonce": 2145142570,
      "isDeleted": false,
      "id": "44wIU1UkgC1js8WhWZxWG",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 2144.9226645709246,
      "y": 190.80282037661186,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 908.4307242809056,
      "height": 519.7782190225288,
      "seed": 436609234,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "index": "aL"
    },
    {
      "type": "text",
      "version": 3934,
      "versionNonce": 810457206,
      "isDeleted": false,
      "id": "6SoxsTZp_by84FMyTVjaw",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 2193.563148461356,
      "y": 207.87179697466905,
      "strokeColor": "#495057",
      "backgroundColor": "#fff",
      "width": 224.19189453125,
      "height": 20,
      "seed": 1652741010,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "High Level Design (continued)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "High Level Design (continued)",
      "lineHeight": 1.25,
      "index": "aM",
      "autoResize": true
    },
    {
      "type": "text",
      "version": 3090,
      "versionNonce": 870175210,
      "isDeleted": false,
      "id": "Oum6vKNp_q3RziJ4X-I82",
      "fillStyle": "cross-hatch",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 2154.0239311549963,
      "y": 199.28751814749143,
      "strokeColor": "#000",
      "backgroundColor": "#000",
      "width": 33,
      "height": 45,
      "seed": 1123454162,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "fontSize": 33.23791410279167,
      "fontFamily": 1,
      "text": "✨",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "✨",
      "lineHeight": 1.3538755729626375,
      "index": "aN",
      "autoResize": true
    },
    {
      "type": "line",
      "version": 2214,
      "versionNonce": 1594890678,
      "isDeleted": false,
      "id": "LC9mZJKR0N0ipq9YUY9_u",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 2,
      "opacity": 100,
      "angle": 0,
      "x": 2154.7480208769007,
      "y": 246.75327409476756,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 266.29623855597583,
      "height": 0.8295616012067057,
      "seed": 703668882,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1760415762038,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          266.29623855597583,
          0.8295616012067057
        ]
      ],
      "index": "aO",
      "polygon": false
    },
    {
      "type": "text",
      "version": 1275,
      "versionNonce": 1710290730,
      "isDeleted": false,
      "id": "MRV16jbnCUJPBXMX5Q_93",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2157.1248443391355,
      "y": 254.4827302974909,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 892.0991821289062,
      "height": 300,
      "seed": 512095950,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1760422819812,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Connection to Chat Servers:\ntbc\n\nDetect users if online/offline:\nWhen user opens app, establishes WS connection. WS server stores Redis of\nuserId -> (server_id,connection_id,timestamp,status)\nif there is userId in redis, that means timestamp is recent. \nWhen user goes offline, websocket server detect disconnection and redis can either delete\nthat record for that userId or set status as offline\n\n\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Connection to Chat Servers:\ntbc\n\nDetect users if online/offline:\nWhen user opens app, establishes WS connection. WS server stores Redis of\nuserId -> (server_id,connection_id,timestamp,status)\nif there is userId in redis, that means timestamp is recent. \nWhen user goes offline, websocket server detect disconnection and redis can either delete\nthat record for that userId or set status as offline\n\n\n",
      "lineHeight": 1.25,
      "index": "aP",
      "autoResize": true
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}